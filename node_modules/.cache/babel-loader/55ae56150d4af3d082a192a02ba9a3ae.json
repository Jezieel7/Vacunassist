{"ast":null,"code":"let {\n  list\n} = require('postcss');\n\nlet parser = require('postcss-value-parser');\n\nlet Browsers = require('./browsers');\n\nlet vendor = require('./vendor');\n\nclass Transition {\n  constructor(prefixes) {\n    this.props = ['transition', 'transition-property'];\n    this.prefixes = prefixes;\n  }\n  /**\n   * Process transition and add prefixes for all necessary properties\n   */\n\n\n  add(decl, result) {\n    let prefix, prop;\n    let add = this.prefixes.add[decl.prop];\n    let vendorPrefixes = this.ruleVendorPrefixes(decl);\n    let declPrefixes = vendorPrefixes || add && add.prefixes || [];\n    let params = this.parse(decl.value);\n    let names = params.map(i => this.findProp(i));\n    let added = [];\n\n    if (names.some(i => i[0] === '-')) {\n      return;\n    }\n\n    for (let param of params) {\n      prop = this.findProp(param);\n      if (prop[0] === '-') continue;\n      let prefixer = this.prefixes.add[prop];\n      if (!prefixer || !prefixer.prefixes) continue;\n\n      for (prefix of prefixer.prefixes) {\n        if (vendorPrefixes && !vendorPrefixes.some(p => prefix.includes(p))) {\n          continue;\n        }\n\n        let prefixed = this.prefixes.prefixed(prop, prefix);\n\n        if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {\n          if (!this.disabled(prop, prefix)) {\n            added.push(this.clone(prop, prefixed, param));\n          }\n        }\n      }\n    }\n\n    params = params.concat(added);\n    let value = this.stringify(params);\n    let webkitClean = this.stringify(this.cleanFromUnprefixed(params, '-webkit-'));\n\n    if (declPrefixes.includes('-webkit-')) {\n      this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean);\n    }\n\n    this.cloneBefore(decl, decl.prop, webkitClean);\n\n    if (declPrefixes.includes('-o-')) {\n      let operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'));\n      this.cloneBefore(decl, `-o-${decl.prop}`, operaClean);\n    }\n\n    for (prefix of declPrefixes) {\n      if (prefix !== '-webkit-' && prefix !== '-o-') {\n        let prefixValue = this.stringify(this.cleanOtherPrefixes(params, prefix));\n        this.cloneBefore(decl, prefix + decl.prop, prefixValue);\n      }\n    }\n\n    if (value !== decl.value && !this.already(decl, decl.prop, value)) {\n      this.checkForWarning(result, decl);\n      decl.cloneBefore();\n      decl.value = value;\n    }\n  }\n  /**\n   * Find property name\n   */\n\n\n  findProp(param) {\n    let prop = param[0].value;\n\n    if (/^\\d/.test(prop)) {\n      for (let [i, token] of param.entries()) {\n        if (i !== 0 && token.type === 'word') {\n          return token.value;\n        }\n      }\n    }\n\n    return prop;\n  }\n  /**\n   * Does we already have this declaration\n   */\n\n\n  already(decl, prop, value) {\n    return decl.parent.some(i => i.prop === prop && i.value === value);\n  }\n  /**\n   * Add declaration if it is not exist\n   */\n\n\n  cloneBefore(decl, prop, value) {\n    if (!this.already(decl, prop, value)) {\n      decl.cloneBefore({\n        prop,\n        value\n      });\n    }\n  }\n  /**\n   * Show transition-property warning\n   */\n\n\n  checkForWarning(result, decl) {\n    if (decl.prop !== 'transition-property') {\n      return;\n    }\n\n    let isPrefixed = false;\n    let hasAssociatedProp = false;\n    decl.parent.each(i => {\n      if (i.type !== 'decl') {\n        return undefined;\n      }\n\n      if (i.prop.indexOf('transition-') !== 0) {\n        return undefined;\n      }\n\n      let values = list.comma(i.value); // check if current Rule's transition-property comma separated value list needs prefixes\n\n      if (i.prop === 'transition-property') {\n        values.forEach(value => {\n          let lookup = this.prefixes.add[value];\n\n          if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {\n            isPrefixed = true;\n          }\n        });\n        return undefined;\n      } // check if another transition-* prop in current Rule has comma separated value list\n\n\n      hasAssociatedProp = hasAssociatedProp || values.length > 1;\n      return false;\n    });\n\n    if (isPrefixed && hasAssociatedProp) {\n      decl.warn(result, 'Replace transition-property to transition, ' + 'because Autoprefixer could not support ' + 'any cases of transition-property ' + 'and other transition-*');\n    }\n  }\n  /**\n   * Process transition and remove all unnecessary properties\n   */\n\n\n  remove(decl) {\n    let params = this.parse(decl.value);\n    params = params.filter(i => {\n      let prop = this.prefixes.remove[this.findProp(i)];\n      return !prop || !prop.remove;\n    });\n    let value = this.stringify(params);\n\n    if (decl.value === value) {\n      return;\n    }\n\n    if (params.length === 0) {\n      decl.remove();\n      return;\n    }\n\n    let double = decl.parent.some(i => {\n      return i.prop === decl.prop && i.value === value;\n    });\n    let smaller = decl.parent.some(i => {\n      return i !== decl && i.prop === decl.prop && i.value.length > value.length;\n    });\n\n    if (double || smaller) {\n      decl.remove();\n      return;\n    }\n\n    decl.value = value;\n  }\n  /**\n   * Parse properties list to array\n   */\n\n\n  parse(value) {\n    let ast = parser(value);\n    let result = [];\n    let param = [];\n\n    for (let node of ast.nodes) {\n      param.push(node);\n\n      if (node.type === 'div' && node.value === ',') {\n        result.push(param);\n        param = [];\n      }\n    }\n\n    result.push(param);\n    return result.filter(i => i.length > 0);\n  }\n  /**\n   * Return properties string from array\n   */\n\n\n  stringify(params) {\n    if (params.length === 0) {\n      return '';\n    }\n\n    let nodes = [];\n\n    for (let param of params) {\n      if (param[param.length - 1].type !== 'div') {\n        param.push(this.div(params));\n      }\n\n      nodes = nodes.concat(param);\n    }\n\n    if (nodes[0].type === 'div') {\n      nodes = nodes.slice(1);\n    }\n\n    if (nodes[nodes.length - 1].type === 'div') {\n      nodes = nodes.slice(0, +-2 + 1 || undefined);\n    }\n\n    return parser.stringify({\n      nodes\n    });\n  }\n  /**\n   * Return new param array with different name\n   */\n\n\n  clone(origin, name, param) {\n    let result = [];\n    let changed = false;\n\n    for (let i of param) {\n      if (!changed && i.type === 'word' && i.value === origin) {\n        result.push({\n          type: 'word',\n          value: name\n        });\n        changed = true;\n      } else {\n        result.push(i);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Find or create separator\n   */\n\n\n  div(params) {\n    for (let param of params) {\n      for (let node of param) {\n        if (node.type === 'div' && node.value === ',') {\n          return node;\n        }\n      }\n    }\n\n    return {\n      type: 'div',\n      value: ',',\n      after: ' '\n    };\n  }\n\n  cleanOtherPrefixes(params, prefix) {\n    return params.filter(param => {\n      let current = vendor.prefix(this.findProp(param));\n      return current === '' || current === prefix;\n    });\n  }\n  /**\n   * Remove all non-webkit prefixes and unprefixed params if we have prefixed\n   */\n\n\n  cleanFromUnprefixed(params, prefix) {\n    let remove = params.map(i => this.findProp(i)).filter(i => i.slice(0, prefix.length) === prefix).map(i => this.prefixes.unprefixed(i));\n    let result = [];\n\n    for (let param of params) {\n      let prop = this.findProp(param);\n      let p = vendor.prefix(prop);\n\n      if (!remove.includes(prop) && (p === prefix || p === '')) {\n        result.push(param);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Check property for disabled by option\n   */\n\n\n  disabled(prop, prefix) {\n    let other = ['order', 'justify-content', 'align-self', 'align-content'];\n\n    if (prop.includes('flex') || other.includes(prop)) {\n      if (this.prefixes.options.flexbox === false) {\n        return true;\n      }\n\n      if (this.prefixes.options.flexbox === 'no-2009') {\n        return prefix.includes('2009');\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Check if transition prop is inside vendor specific rule\n   */\n\n\n  ruleVendorPrefixes(decl) {\n    let {\n      parent\n    } = decl;\n\n    if (parent.type !== 'rule') {\n      return false;\n    } else if (!parent.selector.includes(':-')) {\n      return false;\n    }\n\n    let selectors = Browsers.prefixes().filter(s => parent.selector.includes(':' + s));\n    return selectors.length > 0 ? selectors : false;\n  }\n\n}\n\nmodule.exports = Transition;","map":{"version":3,"names":["list","require","parser","Browsers","vendor","Transition","constructor","prefixes","props","add","decl","result","prefix","prop","vendorPrefixes","ruleVendorPrefixes","declPrefixes","params","parse","value","names","map","i","findProp","added","some","param","prefixer","p","includes","prefixed","disabled","push","clone","concat","stringify","webkitClean","cleanFromUnprefixed","cloneBefore","operaClean","prefixValue","cleanOtherPrefixes","already","checkForWarning","test","token","entries","type","parent","isPrefixed","hasAssociatedProp","each","undefined","indexOf","values","comma","forEach","lookup","length","warn","remove","filter","double","smaller","ast","node","nodes","div","slice","origin","name","changed","after","current","unprefixed","other","options","flexbox","selector","selectors","s","module","exports"],"sources":["C:/Users/PC/Desktop/programaci√≥n/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/transition.js"],"sourcesContent":["let { list } = require('postcss')\nlet parser = require('postcss-value-parser')\n\nlet Browsers = require('./browsers')\nlet vendor = require('./vendor')\n\nclass Transition {\n  constructor(prefixes) {\n    this.props = ['transition', 'transition-property']\n    this.prefixes = prefixes\n  }\n\n  /**\n   * Process transition and add prefixes for all necessary properties\n   */\n  add(decl, result) {\n    let prefix, prop\n    let add = this.prefixes.add[decl.prop]\n    let vendorPrefixes = this.ruleVendorPrefixes(decl)\n    let declPrefixes = vendorPrefixes || (add && add.prefixes) || []\n\n    let params = this.parse(decl.value)\n    let names = params.map(i => this.findProp(i))\n    let added = []\n\n    if (names.some(i => i[0] === '-')) {\n      return\n    }\n\n    for (let param of params) {\n      prop = this.findProp(param)\n      if (prop[0] === '-') continue\n\n      let prefixer = this.prefixes.add[prop]\n      if (!prefixer || !prefixer.prefixes) continue\n\n      for (prefix of prefixer.prefixes) {\n        if (vendorPrefixes && !vendorPrefixes.some(p => prefix.includes(p))) {\n          continue\n        }\n\n        let prefixed = this.prefixes.prefixed(prop, prefix)\n        if (prefixed !== '-ms-transform' && !names.includes(prefixed)) {\n          if (!this.disabled(prop, prefix)) {\n            added.push(this.clone(prop, prefixed, param))\n          }\n        }\n      }\n    }\n\n    params = params.concat(added)\n    let value = this.stringify(params)\n\n    let webkitClean = this.stringify(\n      this.cleanFromUnprefixed(params, '-webkit-')\n    )\n    if (declPrefixes.includes('-webkit-')) {\n      this.cloneBefore(decl, `-webkit-${decl.prop}`, webkitClean)\n    }\n    this.cloneBefore(decl, decl.prop, webkitClean)\n    if (declPrefixes.includes('-o-')) {\n      let operaClean = this.stringify(this.cleanFromUnprefixed(params, '-o-'))\n      this.cloneBefore(decl, `-o-${decl.prop}`, operaClean)\n    }\n\n    for (prefix of declPrefixes) {\n      if (prefix !== '-webkit-' && prefix !== '-o-') {\n        let prefixValue = this.stringify(\n          this.cleanOtherPrefixes(params, prefix)\n        )\n        this.cloneBefore(decl, prefix + decl.prop, prefixValue)\n      }\n    }\n\n    if (value !== decl.value && !this.already(decl, decl.prop, value)) {\n      this.checkForWarning(result, decl)\n      decl.cloneBefore()\n      decl.value = value\n    }\n  }\n\n  /**\n   * Find property name\n   */\n  findProp(param) {\n    let prop = param[0].value\n    if (/^\\d/.test(prop)) {\n      for (let [i, token] of param.entries()) {\n        if (i !== 0 && token.type === 'word') {\n          return token.value\n        }\n      }\n    }\n    return prop\n  }\n\n  /**\n   * Does we already have this declaration\n   */\n  already(decl, prop, value) {\n    return decl.parent.some(i => i.prop === prop && i.value === value)\n  }\n\n  /**\n   * Add declaration if it is not exist\n   */\n  cloneBefore(decl, prop, value) {\n    if (!this.already(decl, prop, value)) {\n      decl.cloneBefore({ prop, value })\n    }\n  }\n\n  /**\n   * Show transition-property warning\n   */\n  checkForWarning(result, decl) {\n    if (decl.prop !== 'transition-property') {\n      return\n    }\n\n    let isPrefixed = false\n    let hasAssociatedProp = false\n\n    decl.parent.each(i => {\n      if (i.type !== 'decl') {\n        return undefined\n      }\n      if (i.prop.indexOf('transition-') !== 0) {\n        return undefined\n      }\n      let values = list.comma(i.value)\n      // check if current Rule's transition-property comma separated value list needs prefixes\n      if (i.prop === 'transition-property') {\n        values.forEach(value => {\n          let lookup = this.prefixes.add[value]\n          if (lookup && lookup.prefixes && lookup.prefixes.length > 0) {\n            isPrefixed = true\n          }\n        })\n        return undefined\n      }\n      // check if another transition-* prop in current Rule has comma separated value list\n      hasAssociatedProp = hasAssociatedProp || values.length > 1\n      return false\n    })\n\n    if (isPrefixed && hasAssociatedProp) {\n      decl.warn(\n        result,\n        'Replace transition-property to transition, ' +\n          'because Autoprefixer could not support ' +\n          'any cases of transition-property ' +\n          'and other transition-*'\n      )\n    }\n  }\n\n  /**\n   * Process transition and remove all unnecessary properties\n   */\n  remove(decl) {\n    let params = this.parse(decl.value)\n    params = params.filter(i => {\n      let prop = this.prefixes.remove[this.findProp(i)]\n      return !prop || !prop.remove\n    })\n    let value = this.stringify(params)\n\n    if (decl.value === value) {\n      return\n    }\n\n    if (params.length === 0) {\n      decl.remove()\n      return\n    }\n\n    let double = decl.parent.some(i => {\n      return i.prop === decl.prop && i.value === value\n    })\n    let smaller = decl.parent.some(i => {\n      return i !== decl && i.prop === decl.prop && i.value.length > value.length\n    })\n\n    if (double || smaller) {\n      decl.remove()\n      return\n    }\n\n    decl.value = value\n  }\n\n  /**\n   * Parse properties list to array\n   */\n  parse(value) {\n    let ast = parser(value)\n    let result = []\n    let param = []\n    for (let node of ast.nodes) {\n      param.push(node)\n      if (node.type === 'div' && node.value === ',') {\n        result.push(param)\n        param = []\n      }\n    }\n    result.push(param)\n    return result.filter(i => i.length > 0)\n  }\n\n  /**\n   * Return properties string from array\n   */\n  stringify(params) {\n    if (params.length === 0) {\n      return ''\n    }\n    let nodes = []\n    for (let param of params) {\n      if (param[param.length - 1].type !== 'div') {\n        param.push(this.div(params))\n      }\n      nodes = nodes.concat(param)\n    }\n    if (nodes[0].type === 'div') {\n      nodes = nodes.slice(1)\n    }\n    if (nodes[nodes.length - 1].type === 'div') {\n      nodes = nodes.slice(0, +-2 + 1 || undefined)\n    }\n    return parser.stringify({ nodes })\n  }\n\n  /**\n   * Return new param array with different name\n   */\n  clone(origin, name, param) {\n    let result = []\n    let changed = false\n    for (let i of param) {\n      if (!changed && i.type === 'word' && i.value === origin) {\n        result.push({ type: 'word', value: name })\n        changed = true\n      } else {\n        result.push(i)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Find or create separator\n   */\n  div(params) {\n    for (let param of params) {\n      for (let node of param) {\n        if (node.type === 'div' && node.value === ',') {\n          return node\n        }\n      }\n    }\n    return { type: 'div', value: ',', after: ' ' }\n  }\n\n  cleanOtherPrefixes(params, prefix) {\n    return params.filter(param => {\n      let current = vendor.prefix(this.findProp(param))\n      return current === '' || current === prefix\n    })\n  }\n\n  /**\n   * Remove all non-webkit prefixes and unprefixed params if we have prefixed\n   */\n  cleanFromUnprefixed(params, prefix) {\n    let remove = params\n      .map(i => this.findProp(i))\n      .filter(i => i.slice(0, prefix.length) === prefix)\n      .map(i => this.prefixes.unprefixed(i))\n\n    let result = []\n    for (let param of params) {\n      let prop = this.findProp(param)\n      let p = vendor.prefix(prop)\n      if (!remove.includes(prop) && (p === prefix || p === '')) {\n        result.push(param)\n      }\n    }\n    return result\n  }\n\n  /**\n   * Check property for disabled by option\n   */\n  disabled(prop, prefix) {\n    let other = ['order', 'justify-content', 'align-self', 'align-content']\n    if (prop.includes('flex') || other.includes(prop)) {\n      if (this.prefixes.options.flexbox === false) {\n        return true\n      }\n\n      if (this.prefixes.options.flexbox === 'no-2009') {\n        return prefix.includes('2009')\n      }\n    }\n    return undefined\n  }\n\n  /**\n   * Check if transition prop is inside vendor specific rule\n   */\n  ruleVendorPrefixes(decl) {\n    let { parent } = decl\n\n    if (parent.type !== 'rule') {\n      return false\n    } else if (!parent.selector.includes(':-')) {\n      return false\n    }\n\n    let selectors = Browsers.prefixes().filter(s =>\n      parent.selector.includes(':' + s)\n    )\n\n    return selectors.length > 0 ? selectors : false\n  }\n}\n\nmodule.exports = Transition\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}