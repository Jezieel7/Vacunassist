{"ast":null,"code":"let browserslist = require('browserslist');\n\nlet agents = require('caniuse-lite').agents;\n\nlet utils = require('./utils');\n\nclass Browsers {\n  /**\n   * Return all prefixes for default browser data\n   */\n  static prefixes() {\n    if (this.prefixesCache) {\n      return this.prefixesCache;\n    }\n\n    this.prefixesCache = [];\n\n    for (let name in agents) {\n      this.prefixesCache.push(`-${agents[name].prefix}-`);\n    }\n\n    this.prefixesCache = utils.uniq(this.prefixesCache).sort((a, b) => b.length - a.length);\n    return this.prefixesCache;\n  }\n  /**\n   * Check is value contain any possible prefix\n   */\n\n\n  static withPrefix(value) {\n    if (!this.prefixesRegexp) {\n      this.prefixesRegexp = new RegExp(this.prefixes().join('|'));\n    }\n\n    return this.prefixesRegexp.test(value);\n  }\n\n  constructor(data, requirements, options, browserslistOpts) {\n    this.data = data;\n    this.options = options || {};\n    this.browserslistOpts = browserslistOpts || {};\n    this.selected = this.parse(requirements);\n  }\n  /**\n   * Return browsers selected by requirements\n   */\n\n\n  parse(requirements) {\n    let opts = {};\n\n    for (let i in this.browserslistOpts) {\n      opts[i] = this.browserslistOpts[i];\n    }\n\n    opts.path = this.options.from;\n    return browserslist(requirements, opts);\n  }\n  /**\n   * Return prefix for selected browser\n   */\n\n\n  prefix(browser) {\n    let [name, version] = browser.split(' ');\n    let data = this.data[name];\n    let prefix = data.prefix_exceptions && data.prefix_exceptions[version];\n\n    if (!prefix) {\n      prefix = data.prefix;\n    }\n\n    return `-${prefix}-`;\n  }\n  /**\n   * Is browser is selected by requirements\n   */\n\n\n  isSelected(browser) {\n    return this.selected.includes(browser);\n  }\n\n}\n\nmodule.exports = Browsers;","map":{"version":3,"names":["browserslist","require","agents","utils","Browsers","prefixes","prefixesCache","name","push","prefix","uniq","sort","a","b","length","withPrefix","value","prefixesRegexp","RegExp","join","test","constructor","data","requirements","options","browserslistOpts","selected","parse","opts","i","path","from","browser","version","split","prefix_exceptions","isSelected","includes","module","exports"],"sources":["C:/Users/PC/Desktop/programaciÃ³n/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/browsers.js"],"sourcesContent":["let browserslist = require('browserslist')\nlet agents = require('caniuse-lite').agents\n\nlet utils = require('./utils')\n\nclass Browsers {\n  /**\n   * Return all prefixes for default browser data\n   */\n  static prefixes() {\n    if (this.prefixesCache) {\n      return this.prefixesCache\n    }\n\n    this.prefixesCache = []\n    for (let name in agents) {\n      this.prefixesCache.push(`-${agents[name].prefix}-`)\n    }\n\n    this.prefixesCache = utils\n      .uniq(this.prefixesCache)\n      .sort((a, b) => b.length - a.length)\n\n    return this.prefixesCache\n  }\n\n  /**\n   * Check is value contain any possible prefix\n   */\n  static withPrefix(value) {\n    if (!this.prefixesRegexp) {\n      this.prefixesRegexp = new RegExp(this.prefixes().join('|'))\n    }\n\n    return this.prefixesRegexp.test(value)\n  }\n\n  constructor(data, requirements, options, browserslistOpts) {\n    this.data = data\n    this.options = options || {}\n    this.browserslistOpts = browserslistOpts || {}\n    this.selected = this.parse(requirements)\n  }\n\n  /**\n   * Return browsers selected by requirements\n   */\n  parse(requirements) {\n    let opts = {}\n    for (let i in this.browserslistOpts) {\n      opts[i] = this.browserslistOpts[i]\n    }\n    opts.path = this.options.from\n    return browserslist(requirements, opts)\n  }\n\n  /**\n   * Return prefix for selected browser\n   */\n  prefix(browser) {\n    let [name, version] = browser.split(' ')\n    let data = this.data[name]\n\n    let prefix = data.prefix_exceptions && data.prefix_exceptions[version]\n    if (!prefix) {\n      prefix = data.prefix\n    }\n    return `-${prefix}-`\n  }\n\n  /**\n   * Is browser is selected by requirements\n   */\n  isSelected(browser) {\n    return this.selected.includes(browser)\n  }\n}\n\nmodule.exports = Browsers\n"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,cAAD,CAAP,CAAwBC,MAArC;;AAEA,IAAIC,KAAK,GAAGF,OAAO,CAAC,SAAD,CAAnB;;AAEA,MAAMG,QAAN,CAAe;EACb;AACF;AACA;EACiB,OAARC,QAAQ,GAAG;IAChB,IAAI,KAAKC,aAAT,EAAwB;MACtB,OAAO,KAAKA,aAAZ;IACD;;IAED,KAAKA,aAAL,GAAqB,EAArB;;IACA,KAAK,IAAIC,IAAT,IAAiBL,MAAjB,EAAyB;MACvB,KAAKI,aAAL,CAAmBE,IAAnB,CAAyB,IAAGN,MAAM,CAACK,IAAD,CAAN,CAAaE,MAAO,GAAhD;IACD;;IAED,KAAKH,aAAL,GAAqBH,KAAK,CACvBO,IADkB,CACb,KAAKJ,aADQ,EAElBK,IAFkB,CAEb,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,MAAF,GAAWF,CAAC,CAACE,MAFV,CAArB;IAIA,OAAO,KAAKR,aAAZ;EACD;EAED;AACF;AACA;;;EACmB,OAAVS,UAAU,CAACC,KAAD,EAAQ;IACvB,IAAI,CAAC,KAAKC,cAAV,EAA0B;MACxB,KAAKA,cAAL,GAAsB,IAAIC,MAAJ,CAAW,KAAKb,QAAL,GAAgBc,IAAhB,CAAqB,GAArB,CAAX,CAAtB;IACD;;IAED,OAAO,KAAKF,cAAL,CAAoBG,IAApB,CAAyBJ,KAAzB,CAAP;EACD;;EAEDK,WAAW,CAACC,IAAD,EAAOC,YAAP,EAAqBC,OAArB,EAA8BC,gBAA9B,EAAgD;IACzD,KAAKH,IAAL,GAAYA,IAAZ;IACA,KAAKE,OAAL,GAAeA,OAAO,IAAI,EAA1B;IACA,KAAKC,gBAAL,GAAwBA,gBAAgB,IAAI,EAA5C;IACA,KAAKC,QAAL,GAAgB,KAAKC,KAAL,CAAWJ,YAAX,CAAhB;EACD;EAED;AACF;AACA;;;EACEI,KAAK,CAACJ,YAAD,EAAe;IAClB,IAAIK,IAAI,GAAG,EAAX;;IACA,KAAK,IAAIC,CAAT,IAAc,KAAKJ,gBAAnB,EAAqC;MACnCG,IAAI,CAACC,CAAD,CAAJ,GAAU,KAAKJ,gBAAL,CAAsBI,CAAtB,CAAV;IACD;;IACDD,IAAI,CAACE,IAAL,GAAY,KAAKN,OAAL,CAAaO,IAAzB;IACA,OAAO/B,YAAY,CAACuB,YAAD,EAAeK,IAAf,CAAnB;EACD;EAED;AACF;AACA;;;EACEnB,MAAM,CAACuB,OAAD,EAAU;IACd,IAAI,CAACzB,IAAD,EAAO0B,OAAP,IAAkBD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAtB;IACA,IAAIZ,IAAI,GAAG,KAAKA,IAAL,CAAUf,IAAV,CAAX;IAEA,IAAIE,MAAM,GAAGa,IAAI,CAACa,iBAAL,IAA0Bb,IAAI,CAACa,iBAAL,CAAuBF,OAAvB,CAAvC;;IACA,IAAI,CAACxB,MAAL,EAAa;MACXA,MAAM,GAAGa,IAAI,CAACb,MAAd;IACD;;IACD,OAAQ,IAAGA,MAAO,GAAlB;EACD;EAED;AACF;AACA;;;EACE2B,UAAU,CAACJ,OAAD,EAAU;IAClB,OAAO,KAAKN,QAAL,CAAcW,QAAd,CAAuBL,OAAvB,CAAP;EACD;;AAtEY;;AAyEfM,MAAM,CAACC,OAAP,GAAiBnC,QAAjB"},"metadata":{},"sourceType":"script"}