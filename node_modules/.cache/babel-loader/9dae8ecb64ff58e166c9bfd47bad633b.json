{"ast":null,"code":"let parser = require('postcss-value-parser');\n\nlet list = require('postcss').list;\n\nlet uniq = require('../utils').uniq;\n\nlet escapeRegexp = require('../utils').escapeRegexp;\n\nlet splitSelector = require('../utils').splitSelector;\n\nfunction convert(value) {\n  if (value && value.length === 2 && value[0] === 'span' && parseInt(value[1], 10) > 0) {\n    return [false, parseInt(value[1], 10)];\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false];\n  }\n\n  return [false, false];\n}\n\nexports.translate = translate;\n\nfunction translate(values, startIndex, endIndex) {\n  let startValue = values[startIndex];\n  let endValue = values[endIndex];\n\n  if (!startValue) {\n    return [false, false];\n  }\n\n  let [start, spanStart] = convert(startValue);\n  let [end, spanEnd] = convert(endValue);\n\n  if (start && !endValue) {\n    return [start, false];\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart];\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd];\n  }\n\n  if (start && end) {\n    return [start, end - start];\n  }\n\n  return [false, false];\n}\n\nexports.parse = parse;\n\nfunction parse(decl) {\n  let node = parser(decl.value);\n  let values = [];\n  let current = 0;\n  values[current] = [];\n\n  for (let i of node.nodes) {\n    if (i.type === 'div') {\n      current += 1;\n      values[current] = [];\n    } else if (i.type === 'word') {\n      values[current].push(i.value);\n    }\n  }\n\n  return values;\n}\n\nexports.insertDecl = insertDecl;\n\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {\n    decl.cloneBefore({\n      prop: `-ms-${prop}`,\n      value: value.toString()\n    });\n  }\n} // Track transforms\n\n\nexports.prefixTrackProp = prefixTrackProp;\n\nfunction prefixTrackProp(_ref) {\n  let {\n    prop,\n    prefix\n  } = _ref;\n  return prefix + prop.replace('template-', '');\n}\n\nfunction transformRepeat(_ref2, _ref3) {\n  let {\n    nodes\n  } = _ref2;\n  let {\n    gap\n  } = _ref3;\n  let {\n    count,\n    size\n  } = nodes.reduce((result, node) => {\n    if (node.type === 'div' && node.value === ',') {\n      result.key = 'size';\n    } else {\n      result[result.key].push(parser.stringify(node));\n    }\n\n    return result;\n  }, {\n    key: 'count',\n    size: [],\n    count: []\n  }); // insert gap values\n\n  if (gap) {\n    size = size.filter(i => i.trim());\n    let val = [];\n\n    for (let i = 1; i <= count; i++) {\n      size.forEach((item, index) => {\n        if (index > 0 || i > 1) {\n          val.push(gap);\n        }\n\n        val.push(item);\n      });\n    }\n\n    return val.join(' ');\n  }\n\n  return `(${size.join('')})[${count.join('')}]`;\n}\n\nexports.prefixTrackValue = prefixTrackValue;\n\nfunction prefixTrackValue(_ref4) {\n  let {\n    value,\n    gap\n  } = _ref4;\n  let result = parser(value).nodes.reduce((nodes, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, {\n          gap\n        })\n      });\n    }\n\n    if (gap && node.type === 'space') {\n      return nodes.concat({\n        type: 'space',\n        value: ' '\n      }, {\n        type: 'word',\n        value: gap\n      }, node);\n    }\n\n    return nodes.concat(node);\n  }, []);\n  return parser.stringify(result);\n} // Parse grid-template-areas\n\n\nlet DOTS = /^\\.+$/;\n\nfunction track(start, end) {\n  return {\n    start,\n    end,\n    span: end - start\n  };\n}\n\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g);\n}\n\nexports.parseGridAreas = parseGridAreas;\n\nfunction parseGridAreas(_ref5) {\n  let {\n    rows,\n    gap\n  } = _ref5;\n  return rows.reduce((areas, line, rowIndex) => {\n    if (gap.row) rowIndex *= 2;\n    if (line.trim() === '') return areas;\n    getColumns(line).forEach((area, columnIndex) => {\n      if (DOTS.test(area)) return;\n      if (gap.column) columnIndex *= 2;\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        };\n      } else {\n        let {\n          column,\n          row\n        } = areas[area];\n        column.start = Math.min(column.start, columnIndex + 1);\n        column.end = Math.max(column.end, columnIndex + 2);\n        column.span = column.end - column.start;\n        row.start = Math.min(row.start, rowIndex + 1);\n        row.end = Math.max(row.end, rowIndex + 2);\n        row.span = row.end - row.start;\n      }\n    });\n    return areas;\n  }, {});\n} // Parse grid-template\n\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value);\n}\n\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto');\n  }\n\n  return result;\n}\n\nexports.parseTemplate = parseTemplate;\n\nfunction parseTemplate(_ref6) {\n  let {\n    decl,\n    gap\n  } = _ref6;\n  let gridTemplate = parser(decl.value).nodes.reduce((result, node) => {\n    let {\n      type,\n      value\n    } = node;\n    if (testTrack(node) || type === 'space') return result; // area\n\n    if (type === 'string') {\n      result = verifyRowSize(result);\n      result.areas.push(value);\n    } // values and function\n\n\n    if (type === 'word' || type === 'function') {\n      result[result.key].push(parser.stringify(node));\n    } // divider(/)\n\n\n    if (type === 'div' && value === '/') {\n      result.key = 'columns';\n      result = verifyRowSize(result);\n    }\n\n    return result;\n  }, {\n    key: 'rows',\n    columns: [],\n    rows: [],\n    areas: []\n  });\n  return {\n    areas: parseGridAreas({\n      rows: gridTemplate.areas,\n      gap\n    }),\n    columns: prefixTrackValue({\n      value: gridTemplate.columns.join(' '),\n      gap: gap.column\n    }),\n    rows: prefixTrackValue({\n      value: gridTemplate.rows.join(' '),\n      gap: gap.row\n    })\n  };\n} // Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\n\n\nfunction getMSDecls(area) {\n  let addRowSpan = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let addColumnSpan = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let result = [{\n    prop: '-ms-grid-row',\n    value: String(area.row.start)\n  }];\n\n  if (area.row.span > 1 || addRowSpan) {\n    result.push({\n      prop: '-ms-grid-row-span',\n      value: String(area.row.span)\n    });\n  }\n\n  result.push({\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  });\n\n  if (area.column.span > 1 || addColumnSpan) {\n    result.push({\n      prop: '-ms-grid-column-span',\n      value: String(area.column.span)\n    });\n  }\n\n  return result;\n}\n\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent;\n  }\n\n  if (!parent.parent) {\n    return false;\n  }\n\n  return getParentMedia(parent.parent);\n}\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\n\n\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(selector => {\n    let selectorBySpace = list.space(selector);\n    let selectorByComma = list.comma(selector);\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('');\n    }\n\n    return selector;\n  });\n  return ruleSelectors.map(ruleSelector => {\n    let newSelector = templateSelectors.map((tplSelector, index) => {\n      let space = index === 0 ? '' : ' ';\n      return `${space}${tplSelector} > ${ruleSelector}`;\n    });\n    return newSelector;\n  });\n}\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\n\n\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(sel => {\n    return ruleB.selectors.includes(sel);\n  });\n}\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\n\n\nfunction parseGridTemplatesData(css) {\n  let parsed = []; // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n\n  css.walkDecls(/grid-template(-areas)?$/, d => {\n    let rule = d.parent;\n    let media = getParentMedia(rule);\n    let gap = getGridGap(d);\n    let inheritedGap = inheritGridGap(d, gap);\n    let {\n      areas\n    } = parseTemplate({\n      decl: d,\n      gap: inheritedGap || gap\n    });\n    let areaNames = Object.keys(areas); // skip node if it doesn't have areas\n\n    if (areaNames.length === 0) {\n      return true;\n    } // check parsed array for item that include the same area names\n    // return index of that item\n\n\n    let index = parsed.reduce((acc, _ref7, idx) => {\n      let {\n        allAreas\n      } = _ref7;\n      let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area));\n      return hasAreas ? idx : acc;\n    }, null);\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      let {\n        allAreas,\n        rules\n      } = parsed[index]; // check if rule has no duplicate area names\n\n      let hasNoDuplicates = rules.some(r => {\n        return r.hasDuplicates === false && selectorsEqual(r, rule);\n      });\n      let duplicatesFound = false; // check need to gather all duplicate area names\n\n      let duplicateAreaNames = rules.reduce((acc, r) => {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true;\n          return r.duplicateAreaNames;\n        }\n\n        if (!duplicatesFound) {\n          areaNames.forEach(name => {\n            if (r.areas[name]) {\n              acc.push(name);\n            }\n          });\n        }\n\n        return uniq(acc);\n      }, []); // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n\n      rules.forEach(r => {\n        areaNames.forEach(name => {\n          let area = r.areas[name];\n\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true;\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true;\n          }\n        });\n      });\n      parsed[index].allAreas = uniq([...allAreas, ...areaNames]);\n      parsed[index].rules.push({\n        hasDuplicates: !hasNoDuplicates,\n        params: media.params,\n        selectors: rule.selectors,\n        node: rule,\n        duplicateAreaNames,\n        areas\n      });\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [{\n          hasDuplicates: false,\n          duplicateRules: [],\n          params: media.params,\n          selectors: rule.selectors,\n          node: rule,\n          duplicateAreaNames: [],\n          areas\n        }]\n      });\n    }\n\n    return undefined;\n  });\n  return parsed;\n}\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\n\n\nexports.insertAreas = insertAreas;\n\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  let gridTemplatesData = parseGridTemplatesData(css); // return undefined if no declarations found\n\n  if (gridTemplatesData.length === 0) {\n    return undefined;\n  } // we need to store the rules that we will insert later\n\n\n  let rulesToInsert = {};\n  css.walkDecls('grid-area', gridArea => {\n    let gridAreaRule = gridArea.parent;\n    let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row';\n    let gridAreaMedia = getParentMedia(gridAreaRule);\n\n    if (isDisabled(gridArea)) {\n      return undefined;\n    }\n\n    let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule);\n    let value = gridArea.value; // found the data that matches grid-area identifier\n\n    let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0];\n\n    if (!data) {\n      return true;\n    }\n\n    let lastArea = data.allAreas[data.allAreas.length - 1];\n    let selectorBySpace = list.space(gridAreaRule.selector);\n    let selectorByComma = list.comma(gridAreaRule.selector);\n    let selectorIsComplex = selectorBySpace.length > 1 && selectorBySpace.length > selectorByComma.length; // prevent doubling of prefixes\n\n    if (hasPrefixedRow) {\n      return false;\n    } // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n\n\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {};\n    }\n\n    let lastRuleIsSet = false; // walk through every grid-template rule data\n\n    for (let rule of data.rules) {\n      let area = rule.areas[value];\n      let hasDuplicateName = rule.duplicateAreaNames.includes(value); // if we can't find the area name, update lastRule and continue\n\n      if (!area) {\n        let lastRule = rulesToInsert[lastArea].lastRule;\n        let lastRuleIndex;\n\n        if (lastRule) {\n          lastRuleIndex = css.index(lastRule);\n        } else {\n          /* c8 ignore next 2 */\n          lastRuleIndex = -1;\n        }\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n\n        continue;\n      } // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n\n\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = [];\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n        getMSDecls(area, false, false).reverse().forEach(i => gridAreaRule.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n        rulesToInsert[lastArea].lastRule = gridAreaRule;\n        lastRuleIsSet = true;\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        // grid-template has duplicates and not inside media rule\n        let cloned = gridAreaRule.clone();\n        cloned.removeAll();\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => cloned.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n        cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n\n        if (rulesToInsert[lastArea].lastRule) {\n          rulesToInsert[lastArea].lastRule.after(cloned);\n        }\n\n        rulesToInsert[lastArea].lastRule = cloned;\n        lastRuleIsSet = true;\n      } else if (rule.hasDuplicates && !rule.params && selectorIsComplex && gridAreaRule.selector.includes(rule.selectors[0])) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove());\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => gridAreaRule.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n      } else if (rule.params) {\n        // grid-template is inside media rule\n        // if we're inside media rule, we need to store prefixed rules\n        // inside rulesToInsert object to be able to preserve the order of media\n        // rules and merge them easily\n        let cloned = gridAreaRule.clone();\n        cloned.removeAll();\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan).reverse().forEach(i => cloned.prepend(Object.assign(i, {\n          raws: {\n            between: gridArea.raws.between\n          }\n        })));\n\n        if (rule.hasDuplicates && hasDuplicateName) {\n          cloned.selectors = changeDuplicateAreaSelectors(cloned.selectors, rule.selectors);\n        }\n\n        cloned.raws = rule.node.raws;\n\n        if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n          // append the prefixed rules right inside media rule\n          // with grid-template\n          rule.node.parent.append(cloned);\n        } else {\n          // store the rule to insert later\n          rulesToInsert[lastArea][rule.params].push(cloned);\n        } // set new rule as last rule ONLY if we didn't set lastRule for\n        // this grid-area before\n\n\n        if (!lastRuleIsSet) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule;\n        }\n      }\n    }\n\n    return undefined;\n  }); // append stored rules inside the media rules\n\n  Object.keys(rulesToInsert).forEach(area => {\n    let data = rulesToInsert[area];\n    let lastRule = data.lastRule;\n    Object.keys(data).reverse().filter(p => p !== 'lastRule').forEach(params => {\n      if (data[params].length > 0 && lastRule) {\n        lastRule.after({\n          name: 'media',\n          params\n        });\n        lastRule.next().append(data[params]);\n      }\n    });\n  });\n  return undefined;\n}\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nexports.warnMissedAreas = warnMissedAreas;\n\nfunction warnMissedAreas(areas, decl, result) {\n  let missed = Object.keys(areas);\n  decl.root().walkDecls('grid-area', gridArea => {\n    missed = missed.filter(e => e !== gridArea.value);\n  });\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '));\n  }\n\n  return undefined;\n}\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nexports.warnTemplateSelectorNotFound = warnTemplateSelectorNotFound;\n\nfunction warnTemplateSelectorNotFound(decl, result) {\n  let rule = decl.parent;\n  let root = decl.root();\n  let duplicatesFound = false; // slice selector array. Remove the last part (for comparison)\n\n  let slicedSelectorArr = list.space(rule.selector).filter(str => str !== '>').slice(0, -1); // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n\n  if (slicedSelectorArr.length > 0) {\n    let gridTemplateFound = false;\n    let foundAreaSelector = null;\n    root.walkDecls(/grid-template(-areas)?$/, d => {\n      let parent = d.parent;\n      let templateSelectors = parent.selectors;\n      let {\n        areas\n      } = parseTemplate({\n        decl: d,\n        gap: getGridGap(d)\n      });\n      let hasArea = areas[decl.value]; // find the the matching selectors\n\n      for (let tplSelector of templateSelectors) {\n        if (gridTemplateFound) {\n          break;\n        }\n\n        let tplSelectorArr = list.space(tplSelector).filter(str => str !== '>');\n        gridTemplateFound = tplSelectorArr.every((item, idx) => item === slicedSelectorArr[idx]);\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true;\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector;\n      } // if we found the duplicate area with different selector\n\n\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true;\n      }\n\n      return undefined;\n    }); // warn user if we didn't find template\n\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(result, 'Autoprefixer cannot find a grid-template ' + `containing the duplicate grid-area \"${decl.value}\" ` + `with full selector matching: ${slicedSelectorArr.join(' ')}`);\n    }\n  }\n}\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\n\n\nexports.warnIfGridRowColumnExists = warnIfGridRowColumnExists;\n\nfunction warnIfGridRowColumnExists(decl, result) {\n  let rule = decl.parent;\n  let decls = [];\n  rule.walkDecls(/^grid-(row|column)/, d => {\n    if (!d.prop.endsWith('-end') && !d.value.startsWith('span') && !d.prop.endsWith('-gap')) {\n      decls.push(d);\n    }\n  });\n\n  if (decls.length > 0) {\n    decls.forEach(d => {\n      d.warn(result, 'You already have a grid-area declaration present in the rule. ' + `You should use either grid-area or ${d.prop}, not both`);\n    });\n  }\n\n  return undefined;\n} // Gap utils\n\n\nexports.getGridGap = getGridGap;\n\nfunction getGridGap(decl) {\n  let gap = {}; // try to find gap\n\n  let testGap = /^(grid-)?((row|column)-)?gap$/;\n  decl.parent.walkDecls(testGap, _ref8 => {\n    let {\n      prop,\n      value\n    } = _ref8;\n\n    if (/^(grid-)?gap$/.test(prop)) {\n      let [row,, column] = parser(value).nodes;\n      gap.row = row && parser.stringify(row);\n      gap.column = column ? parser.stringify(column) : gap.row;\n    }\n\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value;\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value;\n  });\n  return gap;\n}\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\n\n\nfunction parseMediaParams(params) {\n  if (!params) {\n    return [];\n  }\n\n  let parsed = parser(params);\n  let prop;\n  let value;\n  parsed.walk(node => {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value;\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''));\n    }\n  });\n  return [prop, value];\n}\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\n\n\nfunction shouldInheritGap(selA, selB) {\n  let result; // get arrays of selector split in 3-deep array\n\n  let splitSelectorArrA = splitSelector(selA);\n  let splitSelectorArrB = splitSelector(selB);\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false;\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n    let idx = splitSelectorArrA[0].reduce((res, _ref9, index) => {\n      let [item] = _ref9;\n      let firstSelectorPart = splitSelectorArrB[0][0][0];\n\n      if (item === firstSelectorPart) {\n        return index;\n      }\n\n      return false;\n    }, false);\n\n    if (idx) {\n      result = splitSelectorArrB[0].every((arr, index) => {\n        return arr.every((part, innerIndex) => // because selectorA has more space elements, we need to slice\n        // selectorA array by 'idx' number to compare them\n        splitSelectorArrA[0].slice(idx)[index][innerIndex] === part);\n      });\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(byCommaArr => {\n      return byCommaArr.every((bySpaceArr, index) => {\n        return bySpaceArr.every((part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part);\n      });\n    });\n  }\n\n  return result;\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\n\n\nexports.inheritGridGap = inheritGridGap;\n\nfunction inheritGridGap(decl, gap) {\n  let rule = decl.parent;\n  let mediaRule = getParentMedia(rule);\n  let root = rule.root(); // get an array of selector split in 3-deep array\n\n  let splitSelectorArr = splitSelector(rule.selector); // abort if the rule already has gaps\n\n  if (Object.keys(gap).length > 0) {\n    return false;\n  } // e.g ['min-width']\n\n\n  let [prop] = parseMediaParams(mediaRule.params);\n  let lastBySpace = splitSelectorArr[0]; // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n\n  let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0]);\n  let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`); // find the closest rule with the same selector\n\n  let closestRuleGap;\n  root.walkRules(regexp, r => {\n    let gridGap; // abort if are checking the same rule\n\n    if (rule.toString() === r.toString()) {\n      return false;\n    } // find grid-gap values\n\n\n    r.walkDecls('grid-gap', d => gridGap = getGridGap(d)); // skip rule without gaps\n\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true;\n    } // skip rules that should not be inherited from\n\n\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true;\n    }\n\n    let media = getParentMedia(r);\n\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      let propToCompare = parseMediaParams(media.params)[0];\n\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap;\n        return true;\n      }\n    } else {\n      closestRuleGap = gridGap;\n      return true;\n    }\n\n    return undefined;\n  }); // if we find the closest gap object\n\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap;\n  }\n\n  return false;\n}\n\nexports.warnGridGap = warnGridGap;\n\nfunction warnGridGap(_ref10) {\n  let {\n    gap,\n    hasColumns,\n    decl,\n    result\n  } = _ref10;\n  let hasBothGaps = gap.row && gap.column;\n\n  if (!hasColumns && (hasBothGaps || gap.column && !gap.row)) {\n    delete gap.column;\n    decl.warn(result, 'Can not implement grid-gap without grid-template-columns');\n  }\n}\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\n\n\nfunction normalizeRowColumn(str) {\n  let normalized = parser(str).nodes.reduce((result, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      let key = 'count';\n      let [count, value] = node.nodes.reduce((acc, n) => {\n        if (n.type === 'word' && key === 'count') {\n          acc[0] = Math.abs(parseInt(n.value));\n          return acc;\n        }\n\n        if (n.type === 'div' && n.value === ',') {\n          key = 'value';\n          return acc;\n        }\n\n        if (key === 'value') {\n          acc[1] += parser.stringify(n);\n        }\n\n        return acc;\n      }, [0, '']);\n\n      if (count) {\n        for (let i = 0; i < count; i++) {\n          result.push(value);\n        }\n      }\n\n      return result;\n    }\n\n    if (node.type === 'space') {\n      return result;\n    }\n\n    return result.concat(parser.stringify(node));\n  }, []);\n  return normalized;\n}\n\nexports.autoplaceGridItems = autoplaceGridItems;\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\n\nfunction autoplaceGridItems(decl, result, gap) {\n  let autoflowValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'row';\n  let {\n    parent\n  } = decl;\n  let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows');\n  let rows = normalizeRowColumn(rowDecl.value);\n  let columns = normalizeRowColumn(decl.value); // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n\n  let filledRows = rows.map((_, rowIndex) => {\n    return Array.from({\n      length: columns.length\n    }, (v, k) => k + rowIndex * columns.length + 1).join(' ');\n  });\n  let areas = parseGridAreas({\n    rows: filledRows,\n    gap\n  });\n  let keys = Object.keys(areas);\n  let items = keys.map(i => areas[i]); // Change the order of cells if grid-auto-flow value is 'column'\n\n  if (autoflowValue.includes('column')) {\n    items = items.sort((a, b) => a.column.start - b.column.start);\n  } // Insert new rules\n\n\n  items.reverse().forEach((item, index) => {\n    let {\n      column,\n      row\n    } = item;\n    let nodeSelector = parent.selectors.map(sel => sel + ` > *:nth-child(${keys.length - index})`).join(', '); // create new rule\n\n    let node = parent.clone().removeAll(); // change rule selector\n\n    node.selector = nodeSelector; // insert prefixed row/column values\n\n    node.append({\n      prop: '-ms-grid-row',\n      value: row.start\n    });\n    node.append({\n      prop: '-ms-grid-column',\n      value: column.start\n    }); // insert rule\n\n    parent.after(node);\n  });\n  return undefined;\n}","map":{"version":3,"names":["parser","require","list","uniq","escapeRegexp","splitSelector","convert","value","length","parseInt","exports","translate","values","startIndex","endIndex","startValue","endValue","start","spanStart","end","spanEnd","parse","decl","node","current","i","nodes","type","push","insertDecl","prop","parent","some","cloneBefore","toString","prefixTrackProp","prefix","replace","transformRepeat","gap","count","size","reduce","result","key","stringify","filter","trim","val","forEach","item","index","join","prefixTrackValue","concat","DOTS","track","span","getColumns","line","split","parseGridAreas","rows","areas","rowIndex","row","area","columnIndex","test","column","Math","min","max","testTrack","verifyRowSize","parseTemplate","gridTemplate","columns","getMSDecls","addRowSpan","addColumnSpan","String","getParentMedia","name","changeDuplicateAreaSelectors","ruleSelectors","templateSelectors","map","selector","selectorBySpace","space","selectorByComma","comma","slice","ruleSelector","newSelector","tplSelector","selectorsEqual","ruleA","ruleB","selectors","sel","includes","parseGridTemplatesData","css","parsed","walkDecls","d","rule","media","getGridGap","inheritedGap","inheritGridGap","areaNames","Object","keys","acc","idx","allAreas","hasAreas","rules","hasNoDuplicates","r","hasDuplicates","duplicatesFound","duplicateAreaNames","params","updateSpan","areasCount","duplicateRules","undefined","insertAreas","isDisabled","gridTemplatesData","rulesToInsert","gridArea","gridAreaRule","hasPrefixedRow","first","gridAreaMedia","gridAreaRuleIndex","data","lastArea","selectorIsComplex","lastRuleIsSet","hasDuplicateName","lastRule","lastRuleIndex","reverse","prepend","assign","raws","between","cloned","clone","removeAll","after","remove","append","p","next","warnMissedAreas","missed","root","e","warn","warnTemplateSelectorNotFound","slicedSelectorArr","str","gridTemplateFound","foundAreaSelector","hasArea","tplSelectorArr","every","warnIfGridRowColumnExists","decls","endsWith","startsWith","testGap","parseMediaParams","walk","shouldInheritGap","selA","selB","splitSelectorArrA","splitSelectorArrB","res","firstSelectorPart","arr","part","innerIndex","byCommaArr","bySpaceArr","mediaRule","splitSelectorArr","lastBySpace","escaped","regexp","RegExp","closestRuleGap","walkRules","gridGap","propToCompare","warnGridGap","hasColumns","hasBothGaps","normalizeRowColumn","normalized","n","abs","autoplaceGridItems","autoflowValue","rowDecl","find","filledRows","_","Array","from","v","k","items","sort","a","b","nodeSelector"],"sources":["C:/Users/PC/Desktop/programación/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/hacks/grid-utils.js"],"sourcesContent":["let parser = require('postcss-value-parser')\nlet list = require('postcss').list\n\nlet uniq = require('../utils').uniq\nlet escapeRegexp = require('../utils').escapeRegexp\nlet splitSelector = require('../utils').splitSelector\n\nfunction convert(value) {\n  if (\n    value &&\n    value.length === 2 &&\n    value[0] === 'span' &&\n    parseInt(value[1], 10) > 0\n  ) {\n    return [false, parseInt(value[1], 10)]\n  }\n\n  if (value && value.length === 1 && parseInt(value[0], 10) > 0) {\n    return [parseInt(value[0], 10), false]\n  }\n\n  return [false, false]\n}\n\nexports.translate = translate\n\nfunction translate(values, startIndex, endIndex) {\n  let startValue = values[startIndex]\n  let endValue = values[endIndex]\n\n  if (!startValue) {\n    return [false, false]\n  }\n\n  let [start, spanStart] = convert(startValue)\n  let [end, spanEnd] = convert(endValue)\n\n  if (start && !endValue) {\n    return [start, false]\n  }\n\n  if (spanStart && end) {\n    return [end - spanStart, spanStart]\n  }\n\n  if (start && spanEnd) {\n    return [start, spanEnd]\n  }\n\n  if (start && end) {\n    return [start, end - start]\n  }\n\n  return [false, false]\n}\n\nexports.parse = parse\n\nfunction parse(decl) {\n  let node = parser(decl.value)\n\n  let values = []\n  let current = 0\n  values[current] = []\n\n  for (let i of node.nodes) {\n    if (i.type === 'div') {\n      current += 1\n      values[current] = []\n    } else if (i.type === 'word') {\n      values[current].push(i.value)\n    }\n  }\n\n  return values\n}\n\nexports.insertDecl = insertDecl\n\nfunction insertDecl(decl, prop, value) {\n  if (value && !decl.parent.some(i => i.prop === `-ms-${prop}`)) {\n    decl.cloneBefore({\n      prop: `-ms-${prop}`,\n      value: value.toString()\n    })\n  }\n}\n\n// Track transforms\n\nexports.prefixTrackProp = prefixTrackProp\n\nfunction prefixTrackProp({ prop, prefix }) {\n  return prefix + prop.replace('template-', '')\n}\n\nfunction transformRepeat({ nodes }, { gap }) {\n  let { count, size } = nodes.reduce(\n    (result, node) => {\n      if (node.type === 'div' && node.value === ',') {\n        result.key = 'size'\n      } else {\n        result[result.key].push(parser.stringify(node))\n      }\n      return result\n    },\n    {\n      key: 'count',\n      size: [],\n      count: []\n    }\n  )\n\n  // insert gap values\n  if (gap) {\n    size = size.filter(i => i.trim())\n    let val = []\n    for (let i = 1; i <= count; i++) {\n      size.forEach((item, index) => {\n        if (index > 0 || i > 1) {\n          val.push(gap)\n        }\n        val.push(item)\n      })\n    }\n\n    return val.join(' ')\n  }\n\n  return `(${size.join('')})[${count.join('')}]`\n}\n\nexports.prefixTrackValue = prefixTrackValue\n\nfunction prefixTrackValue({ value, gap }) {\n  let result = parser(value).nodes.reduce((nodes, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      return nodes.concat({\n        type: 'word',\n        value: transformRepeat(node, { gap })\n      })\n    }\n    if (gap && node.type === 'space') {\n      return nodes.concat(\n        {\n          type: 'space',\n          value: ' '\n        },\n        {\n          type: 'word',\n          value: gap\n        },\n        node\n      )\n    }\n    return nodes.concat(node)\n  }, [])\n\n  return parser.stringify(result)\n}\n\n// Parse grid-template-areas\n\nlet DOTS = /^\\.+$/\n\nfunction track(start, end) {\n  return { start, end, span: end - start }\n}\n\nfunction getColumns(line) {\n  return line.trim().split(/\\s+/g)\n}\n\nexports.parseGridAreas = parseGridAreas\n\nfunction parseGridAreas({ rows, gap }) {\n  return rows.reduce((areas, line, rowIndex) => {\n    if (gap.row) rowIndex *= 2\n\n    if (line.trim() === '') return areas\n\n    getColumns(line).forEach((area, columnIndex) => {\n      if (DOTS.test(area)) return\n\n      if (gap.column) columnIndex *= 2\n\n      if (typeof areas[area] === 'undefined') {\n        areas[area] = {\n          column: track(columnIndex + 1, columnIndex + 2),\n          row: track(rowIndex + 1, rowIndex + 2)\n        }\n      } else {\n        let { column, row } = areas[area]\n\n        column.start = Math.min(column.start, columnIndex + 1)\n        column.end = Math.max(column.end, columnIndex + 2)\n        column.span = column.end - column.start\n\n        row.start = Math.min(row.start, rowIndex + 1)\n        row.end = Math.max(row.end, rowIndex + 2)\n        row.span = row.end - row.start\n      }\n    })\n\n    return areas\n  }, {})\n}\n\n// Parse grid-template\n\nfunction testTrack(node) {\n  return node.type === 'word' && /^\\[.+]$/.test(node.value)\n}\n\nfunction verifyRowSize(result) {\n  if (result.areas.length > result.rows.length) {\n    result.rows.push('auto')\n  }\n  return result\n}\n\nexports.parseTemplate = parseTemplate\n\nfunction parseTemplate({ decl, gap }) {\n  let gridTemplate = parser(decl.value).nodes.reduce(\n    (result, node) => {\n      let { type, value } = node\n\n      if (testTrack(node) || type === 'space') return result\n\n      // area\n      if (type === 'string') {\n        result = verifyRowSize(result)\n        result.areas.push(value)\n      }\n\n      // values and function\n      if (type === 'word' || type === 'function') {\n        result[result.key].push(parser.stringify(node))\n      }\n\n      // divider(/)\n      if (type === 'div' && value === '/') {\n        result.key = 'columns'\n        result = verifyRowSize(result)\n      }\n\n      return result\n    },\n    {\n      key: 'rows',\n      columns: [],\n      rows: [],\n      areas: []\n    }\n  )\n\n  return {\n    areas: parseGridAreas({\n      rows: gridTemplate.areas,\n      gap\n    }),\n    columns: prefixTrackValue({\n      value: gridTemplate.columns.join(' '),\n      gap: gap.column\n    }),\n    rows: prefixTrackValue({\n      value: gridTemplate.rows.join(' '),\n      gap: gap.row\n    })\n  }\n}\n\n// Insert parsed grid areas\n\n/**\n * Get an array of -ms- prefixed props and values\n * @param  {Object} [area] area object with column and row data\n * @param  {Boolean} [addRowSpan] should we add grid-column-row value?\n * @param  {Boolean} [addColumnSpan] should we add grid-column-span value?\n * @return {Array<Object>}\n */\nfunction getMSDecls(area, addRowSpan = false, addColumnSpan = false) {\n  let result = [\n    {\n      prop: '-ms-grid-row',\n      value: String(area.row.start)\n    }\n  ]\n  if (area.row.span > 1 || addRowSpan) {\n    result.push({\n      prop: '-ms-grid-row-span',\n      value: String(area.row.span)\n    })\n  }\n  result.push({\n    prop: '-ms-grid-column',\n    value: String(area.column.start)\n  })\n  if (area.column.span > 1 || addColumnSpan) {\n    result.push({\n      prop: '-ms-grid-column-span',\n      value: String(area.column.span)\n    })\n  }\n  return result\n}\n\nfunction getParentMedia(parent) {\n  if (parent.type === 'atrule' && parent.name === 'media') {\n    return parent\n  }\n  if (!parent.parent) {\n    return false\n  }\n  return getParentMedia(parent.parent)\n}\n\n/**\n * change selectors for rules with duplicate grid-areas.\n * @param  {Array<Rule>} rules\n * @param  {Array<String>} templateSelectors\n * @return {Array<Rule>} rules with changed selectors\n */\nfunction changeDuplicateAreaSelectors(ruleSelectors, templateSelectors) {\n  ruleSelectors = ruleSelectors.map(selector => {\n    let selectorBySpace = list.space(selector)\n    let selectorByComma = list.comma(selector)\n\n    if (selectorBySpace.length > selectorByComma.length) {\n      selector = selectorBySpace.slice(-1).join('')\n    }\n    return selector\n  })\n\n  return ruleSelectors.map(ruleSelector => {\n    let newSelector = templateSelectors.map((tplSelector, index) => {\n      let space = index === 0 ? '' : ' '\n      return `${space}${tplSelector} > ${ruleSelector}`\n    })\n\n    return newSelector\n  })\n}\n\n/**\n * check if selector of rules are equal\n * @param  {Rule} ruleA\n * @param  {Rule} ruleB\n * @return {Boolean}\n */\nfunction selectorsEqual(ruleA, ruleB) {\n  return ruleA.selectors.some(sel => {\n    return ruleB.selectors.includes(sel)\n  })\n}\n\n/**\n * Parse data from all grid-template(-areas) declarations\n * @param  {Root} css css root\n * @return {Object} parsed data\n */\nfunction parseGridTemplatesData(css) {\n  let parsed = []\n\n  // we walk through every grid-template(-areas) declaration and store\n  // data with the same area names inside the item\n  css.walkDecls(/grid-template(-areas)?$/, d => {\n    let rule = d.parent\n    let media = getParentMedia(rule)\n    let gap = getGridGap(d)\n    let inheritedGap = inheritGridGap(d, gap)\n    let { areas } = parseTemplate({ decl: d, gap: inheritedGap || gap })\n    let areaNames = Object.keys(areas)\n\n    // skip node if it doesn't have areas\n    if (areaNames.length === 0) {\n      return true\n    }\n\n    // check parsed array for item that include the same area names\n    // return index of that item\n    let index = parsed.reduce((acc, { allAreas }, idx) => {\n      let hasAreas = allAreas && areaNames.some(area => allAreas.includes(area))\n      return hasAreas ? idx : acc\n    }, null)\n\n    if (index !== null) {\n      // index is found, add the grid-template data to that item\n      let { allAreas, rules } = parsed[index]\n\n      // check if rule has no duplicate area names\n      let hasNoDuplicates = rules.some(r => {\n        return r.hasDuplicates === false && selectorsEqual(r, rule)\n      })\n\n      let duplicatesFound = false\n\n      // check need to gather all duplicate area names\n      let duplicateAreaNames = rules.reduce((acc, r) => {\n        if (!r.params && selectorsEqual(r, rule)) {\n          duplicatesFound = true\n          return r.duplicateAreaNames\n        }\n        if (!duplicatesFound) {\n          areaNames.forEach(name => {\n            if (r.areas[name]) {\n              acc.push(name)\n            }\n          })\n        }\n        return uniq(acc)\n      }, [])\n\n      // update grid-row/column-span values for areas with duplicate\n      // area names. @see #1084 and #1146\n      rules.forEach(r => {\n        areaNames.forEach(name => {\n          let area = r.areas[name]\n          if (area && area.row.span !== areas[name].row.span) {\n            areas[name].row.updateSpan = true\n          }\n\n          if (area && area.column.span !== areas[name].column.span) {\n            areas[name].column.updateSpan = true\n          }\n        })\n      })\n\n      parsed[index].allAreas = uniq([...allAreas, ...areaNames])\n      parsed[index].rules.push({\n        hasDuplicates: !hasNoDuplicates,\n        params: media.params,\n        selectors: rule.selectors,\n        node: rule,\n        duplicateAreaNames,\n        areas\n      })\n    } else {\n      // index is NOT found, push the new item to the parsed array\n      parsed.push({\n        allAreas: areaNames,\n        areasCount: 0,\n        rules: [\n          {\n            hasDuplicates: false,\n            duplicateRules: [],\n            params: media.params,\n            selectors: rule.selectors,\n            node: rule,\n            duplicateAreaNames: [],\n            areas\n          }\n        ]\n      })\n    }\n\n    return undefined\n  })\n\n  return parsed\n}\n\n/**\n * insert prefixed grid-area declarations\n * @param  {Root}  css css root\n * @param  {Function} isDisabled check if the rule is disabled\n * @return {void}\n */\nexports.insertAreas = insertAreas\n\nfunction insertAreas(css, isDisabled) {\n  // parse grid-template declarations\n  let gridTemplatesData = parseGridTemplatesData(css)\n\n  // return undefined if no declarations found\n  if (gridTemplatesData.length === 0) {\n    return undefined\n  }\n\n  // we need to store the rules that we will insert later\n  let rulesToInsert = {}\n\n  css.walkDecls('grid-area', gridArea => {\n    let gridAreaRule = gridArea.parent\n    let hasPrefixedRow = gridAreaRule.first.prop === '-ms-grid-row'\n    let gridAreaMedia = getParentMedia(gridAreaRule)\n\n    if (isDisabled(gridArea)) {\n      return undefined\n    }\n\n    let gridAreaRuleIndex = css.index(gridAreaMedia || gridAreaRule)\n\n    let value = gridArea.value\n    // found the data that matches grid-area identifier\n    let data = gridTemplatesData.filter(d => d.allAreas.includes(value))[0]\n\n    if (!data) {\n      return true\n    }\n\n    let lastArea = data.allAreas[data.allAreas.length - 1]\n    let selectorBySpace = list.space(gridAreaRule.selector)\n    let selectorByComma = list.comma(gridAreaRule.selector)\n    let selectorIsComplex =\n      selectorBySpace.length > 1 &&\n      selectorBySpace.length > selectorByComma.length\n\n    // prevent doubling of prefixes\n    if (hasPrefixedRow) {\n      return false\n    }\n\n    // create the empty object with the key as the last area name\n    // e.g if we have templates with \"a b c\" values, \"c\" will be the last area\n    if (!rulesToInsert[lastArea]) {\n      rulesToInsert[lastArea] = {}\n    }\n\n    let lastRuleIsSet = false\n\n    // walk through every grid-template rule data\n    for (let rule of data.rules) {\n      let area = rule.areas[value]\n      let hasDuplicateName = rule.duplicateAreaNames.includes(value)\n\n      // if we can't find the area name, update lastRule and continue\n      if (!area) {\n        let lastRule = rulesToInsert[lastArea].lastRule\n        let lastRuleIndex\n        if (lastRule) {\n          lastRuleIndex = css.index(lastRule)\n        } else {\n          /* c8 ignore next 2 */\n          lastRuleIndex = -1\n        }\n\n        if (gridAreaRuleIndex > lastRuleIndex) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule\n        }\n        continue\n      }\n\n      // for grid-templates inside media rule we need to create empty\n      // array to push prefixed grid-area rules later\n      if (rule.params && !rulesToInsert[lastArea][rule.params]) {\n        rulesToInsert[lastArea][rule.params] = []\n      }\n\n      if ((!rule.hasDuplicates || !hasDuplicateName) && !rule.params) {\n        // grid-template has no duplicates and not inside media rule\n\n        getMSDecls(area, false, false)\n          .reverse()\n          .forEach(i =>\n            gridAreaRule.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        rulesToInsert[lastArea].lastRule = gridAreaRule\n        lastRuleIsSet = true\n      } else if (rule.hasDuplicates && !rule.params && !selectorIsComplex) {\n        // grid-template has duplicates and not inside media rule\n        let cloned = gridAreaRule.clone()\n        cloned.removeAll()\n\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            cloned.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        cloned.selectors = changeDuplicateAreaSelectors(\n          cloned.selectors,\n          rule.selectors\n        )\n\n        if (rulesToInsert[lastArea].lastRule) {\n          rulesToInsert[lastArea].lastRule.after(cloned)\n        }\n        rulesToInsert[lastArea].lastRule = cloned\n        lastRuleIsSet = true\n      } else if (\n        rule.hasDuplicates &&\n        !rule.params &&\n        selectorIsComplex &&\n        gridAreaRule.selector.includes(rule.selectors[0])\n      ) {\n        // grid-template has duplicates and not inside media rule\n        // and the selector is complex\n        gridAreaRule.walkDecls(/-ms-grid-(row|column)/, d => d.remove())\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            gridAreaRule.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n      } else if (rule.params) {\n        // grid-template is inside media rule\n        // if we're inside media rule, we need to store prefixed rules\n        // inside rulesToInsert object to be able to preserve the order of media\n        // rules and merge them easily\n        let cloned = gridAreaRule.clone()\n        cloned.removeAll()\n\n        getMSDecls(area, area.row.updateSpan, area.column.updateSpan)\n          .reverse()\n          .forEach(i =>\n            cloned.prepend(\n              Object.assign(i, {\n                raws: {\n                  between: gridArea.raws.between\n                }\n              })\n            )\n          )\n\n        if (rule.hasDuplicates && hasDuplicateName) {\n          cloned.selectors = changeDuplicateAreaSelectors(\n            cloned.selectors,\n            rule.selectors\n          )\n        }\n\n        cloned.raws = rule.node.raws\n\n        if (css.index(rule.node.parent) > gridAreaRuleIndex) {\n          // append the prefixed rules right inside media rule\n          // with grid-template\n          rule.node.parent.append(cloned)\n        } else {\n          // store the rule to insert later\n          rulesToInsert[lastArea][rule.params].push(cloned)\n        }\n\n        // set new rule as last rule ONLY if we didn't set lastRule for\n        // this grid-area before\n        if (!lastRuleIsSet) {\n          rulesToInsert[lastArea].lastRule = gridAreaMedia || gridAreaRule\n        }\n      }\n    }\n\n    return undefined\n  })\n\n  // append stored rules inside the media rules\n  Object.keys(rulesToInsert).forEach(area => {\n    let data = rulesToInsert[area]\n    let lastRule = data.lastRule\n    Object.keys(data)\n      .reverse()\n      .filter(p => p !== 'lastRule')\n      .forEach(params => {\n        if (data[params].length > 0 && lastRule) {\n          lastRule.after({ name: 'media', params })\n          lastRule.next().append(data[params])\n        }\n      })\n  })\n\n  return undefined\n}\n\n/**\n * Warn user if grid area identifiers are not found\n * @param  {Object} areas\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnMissedAreas = warnMissedAreas\n\nfunction warnMissedAreas(areas, decl, result) {\n  let missed = Object.keys(areas)\n\n  decl.root().walkDecls('grid-area', gridArea => {\n    missed = missed.filter(e => e !== gridArea.value)\n  })\n\n  if (missed.length > 0) {\n    decl.warn(result, 'Can not find grid areas: ' + missed.join(', '))\n  }\n\n  return undefined\n}\n\n/**\n * compare selectors with grid-area rule and grid-template rule\n * show warning if grid-template selector is not found\n * (this function used for grid-area rule)\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnTemplateSelectorNotFound = warnTemplateSelectorNotFound\n\nfunction warnTemplateSelectorNotFound(decl, result) {\n  let rule = decl.parent\n  let root = decl.root()\n  let duplicatesFound = false\n\n  // slice selector array. Remove the last part (for comparison)\n  let slicedSelectorArr = list\n    .space(rule.selector)\n    .filter(str => str !== '>')\n    .slice(0, -1)\n\n  // we need to compare only if selector is complex.\n  // e.g '.grid-cell' is simple, but '.parent > .grid-cell' is complex\n  if (slicedSelectorArr.length > 0) {\n    let gridTemplateFound = false\n    let foundAreaSelector = null\n\n    root.walkDecls(/grid-template(-areas)?$/, d => {\n      let parent = d.parent\n      let templateSelectors = parent.selectors\n\n      let { areas } = parseTemplate({ decl: d, gap: getGridGap(d) })\n      let hasArea = areas[decl.value]\n\n      // find the the matching selectors\n      for (let tplSelector of templateSelectors) {\n        if (gridTemplateFound) {\n          break\n        }\n        let tplSelectorArr = list.space(tplSelector).filter(str => str !== '>')\n\n        gridTemplateFound = tplSelectorArr.every(\n          (item, idx) => item === slicedSelectorArr[idx]\n        )\n      }\n\n      if (gridTemplateFound || !hasArea) {\n        return true\n      }\n\n      if (!foundAreaSelector) {\n        foundAreaSelector = parent.selector\n      }\n\n      // if we found the duplicate area with different selector\n      if (foundAreaSelector && foundAreaSelector !== parent.selector) {\n        duplicatesFound = true\n      }\n\n      return undefined\n    })\n\n    // warn user if we didn't find template\n    if (!gridTemplateFound && duplicatesFound) {\n      decl.warn(\n        result,\n        'Autoprefixer cannot find a grid-template ' +\n          `containing the duplicate grid-area \"${decl.value}\" ` +\n          `with full selector matching: ${slicedSelectorArr.join(' ')}`\n      )\n    }\n  }\n}\n\n/**\n * warn user if both grid-area and grid-(row|column)\n * declarations are present in the same rule\n * @param  {Declaration} decl\n * @param  {Result} result\n * @return {void}\n */\nexports.warnIfGridRowColumnExists = warnIfGridRowColumnExists\n\nfunction warnIfGridRowColumnExists(decl, result) {\n  let rule = decl.parent\n  let decls = []\n  rule.walkDecls(/^grid-(row|column)/, d => {\n    if (\n      !d.prop.endsWith('-end') &&\n      !d.value.startsWith('span') &&\n      !d.prop.endsWith('-gap')\n    ) {\n      decls.push(d)\n    }\n  })\n  if (decls.length > 0) {\n    decls.forEach(d => {\n      d.warn(\n        result,\n        'You already have a grid-area declaration present in the rule. ' +\n          `You should use either grid-area or ${d.prop}, not both`\n      )\n    })\n  }\n\n  return undefined\n}\n\n// Gap utils\n\nexports.getGridGap = getGridGap\n\nfunction getGridGap(decl) {\n  let gap = {}\n\n  // try to find gap\n  let testGap = /^(grid-)?((row|column)-)?gap$/\n  decl.parent.walkDecls(testGap, ({ prop, value }) => {\n    if (/^(grid-)?gap$/.test(prop)) {\n      let [row, , column] = parser(value).nodes\n\n      gap.row = row && parser.stringify(row)\n      gap.column = column ? parser.stringify(column) : gap.row\n    }\n    if (/^(grid-)?row-gap$/.test(prop)) gap.row = value\n    if (/^(grid-)?column-gap$/.test(prop)) gap.column = value\n  })\n\n  return gap\n}\n\n/**\n * parse media parameters (for example 'min-width: 500px')\n * @param  {String} params parameter to parse\n * @return {}\n */\nfunction parseMediaParams(params) {\n  if (!params) {\n    return []\n  }\n  let parsed = parser(params)\n  let prop\n  let value\n\n  parsed.walk(node => {\n    if (node.type === 'word' && /min|max/g.test(node.value)) {\n      prop = node.value\n    } else if (node.value.includes('px')) {\n      value = parseInt(node.value.replace(/\\D/g, ''))\n    }\n  })\n\n  return [prop, value]\n}\n\n/**\n * Compare the selectors and decide if we\n * need to inherit gap from compared selector or not.\n * @type {String} selA\n * @type {String} selB\n * @return {Boolean}\n */\nfunction shouldInheritGap(selA, selB) {\n  let result\n\n  // get arrays of selector split in 3-deep array\n  let splitSelectorArrA = splitSelector(selA)\n  let splitSelectorArrB = splitSelector(selB)\n\n  if (splitSelectorArrA[0].length < splitSelectorArrB[0].length) {\n    // abort if selectorA has lower descendant specificity then selectorB\n    // (e.g '.grid' and '.hello .world .grid')\n    return false\n  } else if (splitSelectorArrA[0].length > splitSelectorArrB[0].length) {\n    // if selectorA has higher descendant specificity then selectorB\n    // (e.g '.foo .bar .grid' and '.grid')\n\n    let idx = splitSelectorArrA[0].reduce((res, [item], index) => {\n      let firstSelectorPart = splitSelectorArrB[0][0][0]\n      if (item === firstSelectorPart) {\n        return index\n      }\n      return false\n    }, false)\n\n    if (idx) {\n      result = splitSelectorArrB[0].every((arr, index) => {\n        return arr.every(\n          (part, innerIndex) =>\n            // because selectorA has more space elements, we need to slice\n            // selectorA array by 'idx' number to compare them\n            splitSelectorArrA[0].slice(idx)[index][innerIndex] === part\n        )\n      })\n    }\n  } else {\n    // if selectorA has the same descendant specificity as selectorB\n    // this condition covers cases such as: '.grid.foo.bar' and '.grid'\n    result = splitSelectorArrB.some(byCommaArr => {\n      return byCommaArr.every((bySpaceArr, index) => {\n        return bySpaceArr.every(\n          (part, innerIndex) => splitSelectorArrA[0][index][innerIndex] === part\n        )\n      })\n    })\n  }\n\n  return result\n}\n/**\n * inherit grid gap values from the closest rule above\n * with the same selector\n * @param  {Declaration} decl\n * @param  {Object} gap gap values\n * @return {Object | Boolean} return gap values or false (if not found)\n */\nexports.inheritGridGap = inheritGridGap\n\nfunction inheritGridGap(decl, gap) {\n  let rule = decl.parent\n  let mediaRule = getParentMedia(rule)\n  let root = rule.root()\n\n  // get an array of selector split in 3-deep array\n  let splitSelectorArr = splitSelector(rule.selector)\n\n  // abort if the rule already has gaps\n  if (Object.keys(gap).length > 0) {\n    return false\n  }\n\n  // e.g ['min-width']\n  let [prop] = parseMediaParams(mediaRule.params)\n\n  let lastBySpace = splitSelectorArr[0]\n\n  // get escaped value from the selector\n  // if we have '.grid-2.foo.bar' selector, will be '\\.grid\\-2'\n  let escaped = escapeRegexp(lastBySpace[lastBySpace.length - 1][0])\n\n  let regexp = new RegExp(`(${escaped}$)|(${escaped}[,.])`)\n\n  // find the closest rule with the same selector\n  let closestRuleGap\n  root.walkRules(regexp, r => {\n    let gridGap\n\n    // abort if are checking the same rule\n    if (rule.toString() === r.toString()) {\n      return false\n    }\n\n    // find grid-gap values\n    r.walkDecls('grid-gap', d => (gridGap = getGridGap(d)))\n\n    // skip rule without gaps\n    if (!gridGap || Object.keys(gridGap).length === 0) {\n      return true\n    }\n\n    // skip rules that should not be inherited from\n    if (!shouldInheritGap(rule.selector, r.selector)) {\n      return true\n    }\n\n    let media = getParentMedia(r)\n    if (media) {\n      // if we are inside media, we need to check that media props match\n      // e.g ('min-width' === 'min-width')\n      let propToCompare = parseMediaParams(media.params)[0]\n      if (propToCompare === prop) {\n        closestRuleGap = gridGap\n        return true\n      }\n    } else {\n      closestRuleGap = gridGap\n      return true\n    }\n\n    return undefined\n  })\n\n  // if we find the closest gap object\n  if (closestRuleGap && Object.keys(closestRuleGap).length > 0) {\n    return closestRuleGap\n  }\n  return false\n}\n\nexports.warnGridGap = warnGridGap\n\nfunction warnGridGap({ gap, hasColumns, decl, result }) {\n  let hasBothGaps = gap.row && gap.column\n  if (!hasColumns && (hasBothGaps || (gap.column && !gap.row))) {\n    delete gap.column\n    decl.warn(\n      result,\n      'Can not implement grid-gap without grid-template-columns'\n    )\n  }\n}\n\n/**\n * normalize the grid-template-rows/columns values\n * @param  {String} str grid-template-rows/columns value\n * @return {Array} normalized array with values\n * @example\n * let normalized = normalizeRowColumn('1fr repeat(2, 20px 50px) 1fr')\n * normalized // <= ['1fr', '20px', '50px', '20px', '50px', '1fr']\n */\nfunction normalizeRowColumn(str) {\n  let normalized = parser(str).nodes.reduce((result, node) => {\n    if (node.type === 'function' && node.value === 'repeat') {\n      let key = 'count'\n\n      let [count, value] = node.nodes.reduce(\n        (acc, n) => {\n          if (n.type === 'word' && key === 'count') {\n            acc[0] = Math.abs(parseInt(n.value))\n            return acc\n          }\n          if (n.type === 'div' && n.value === ',') {\n            key = 'value'\n            return acc\n          }\n          if (key === 'value') {\n            acc[1] += parser.stringify(n)\n          }\n          return acc\n        },\n        [0, '']\n      )\n\n      if (count) {\n        for (let i = 0; i < count; i++) {\n          result.push(value)\n        }\n      }\n\n      return result\n    }\n    if (node.type === 'space') {\n      return result\n    }\n    return result.concat(parser.stringify(node))\n  }, [])\n\n  return normalized\n}\n\nexports.autoplaceGridItems = autoplaceGridItems\n\n/**\n * Autoplace grid items\n * @param {Declaration} decl\n * @param {Result} result\n * @param {Object} gap gap values\n * @param {String} autoflowValue grid-auto-flow value\n * @return {void}\n * @see https://github.com/postcss/autoprefixer/issues/1148\n */\nfunction autoplaceGridItems(decl, result, gap, autoflowValue = 'row') {\n  let { parent } = decl\n\n  let rowDecl = parent.nodes.find(i => i.prop === 'grid-template-rows')\n  let rows = normalizeRowColumn(rowDecl.value)\n  let columns = normalizeRowColumn(decl.value)\n\n  // Build array of area names with dummy values. If we have 3 columns and\n  // 2 rows, filledRows will be equal to ['1 2 3', '4 5 6']\n  let filledRows = rows.map((_, rowIndex) => {\n    return Array.from(\n      { length: columns.length },\n      (v, k) => k + rowIndex * columns.length + 1\n    ).join(' ')\n  })\n\n  let areas = parseGridAreas({ rows: filledRows, gap })\n  let keys = Object.keys(areas)\n  let items = keys.map(i => areas[i])\n\n  // Change the order of cells if grid-auto-flow value is 'column'\n  if (autoflowValue.includes('column')) {\n    items = items.sort((a, b) => a.column.start - b.column.start)\n  }\n\n  // Insert new rules\n  items.reverse().forEach((item, index) => {\n    let { column, row } = item\n    let nodeSelector = parent.selectors\n      .map(sel => sel + ` > *:nth-child(${keys.length - index})`)\n      .join(', ')\n\n    // create new rule\n    let node = parent.clone().removeAll()\n\n    // change rule selector\n    node.selector = nodeSelector\n\n    // insert prefixed row/column values\n    node.append({ prop: '-ms-grid-row', value: row.start })\n    node.append({ prop: '-ms-grid-column', value: column.start })\n\n    // insert rule\n    parent.after(node)\n  })\n\n  return undefined\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}