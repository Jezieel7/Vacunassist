{"ast":null,"code":"let {\n  list\n} = require('postcss');\n/**\n * Throw special error, to tell beniary,\n * that this error is from Autoprefixer.\n */\n\n\nmodule.exports.error = function (text) {\n  let err = new Error(text);\n  err.autoprefixer = true;\n  throw err;\n};\n/**\n * Return array, that doesn’t contain duplicates.\n */\n\n\nmodule.exports.uniq = function (array) {\n  return [...new Set(array)];\n};\n/**\n * Return \"-webkit-\" on \"-webkit- old\"\n */\n\n\nmodule.exports.removeNote = function (string) {\n  if (!string.includes(' ')) {\n    return string;\n  }\n\n  return string.split(' ')[0];\n};\n/**\n * Escape RegExp symbols\n */\n\n\nmodule.exports.escapeRegexp = function (string) {\n  return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&');\n};\n/**\n * Return regexp to check, that CSS string contain word\n */\n\n\nmodule.exports.regexp = function (word) {\n  let escape = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (escape) {\n    word = this.escapeRegexp(word);\n  }\n\n  return new RegExp(`(^|[\\\\s,(])(${word}($|[\\\\s(,]))`, 'gi');\n};\n/**\n * Change comma list\n */\n\n\nmodule.exports.editList = function (value, callback) {\n  let origin = list.comma(value);\n  let changed = callback(origin, []);\n\n  if (origin === changed) {\n    return value;\n  }\n\n  let join = value.match(/,\\s*/);\n  join = join ? join[0] : ', ';\n  return changed.join(join);\n};\n/**\n * Split the selector into parts.\n * It returns 3 level deep array because selectors can be comma\n * separated (1), space separated (2), and combined (3)\n * @param {String} selector selector string\n * @return {Array<Array<Array>>} 3 level deep array of split selector\n * @see utils.test.js for examples\n */\n\n\nmodule.exports.splitSelector = function (selector) {\n  return list.comma(selector).map(i => {\n    return list.space(i).map(k => {\n      return k.split(/(?=\\.|#)/g);\n    });\n  });\n};\n/**\n * Return true if a given value only contains numbers.\n * @param {*} value\n * @returns {boolean}\n */\n\n\nmodule.exports.isPureNumber = function (value) {\n  if (typeof value === 'number') {\n    return true;\n  }\n\n  if (typeof value === 'string') {\n    return /^[0-9]+$/.test(value);\n  }\n\n  return false;\n};","map":{"version":3,"names":["list","require","module","exports","error","text","err","Error","autoprefixer","uniq","array","Set","removeNote","string","includes","split","escapeRegexp","replace","regexp","word","escape","RegExp","editList","value","callback","origin","comma","changed","join","match","splitSelector","selector","map","i","space","k","isPureNumber","test"],"sources":["C:/Users/PC/Desktop/programación/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/utils.js"],"sourcesContent":["let { list } = require('postcss')\n\n/**\n * Throw special error, to tell beniary,\n * that this error is from Autoprefixer.\n */\nmodule.exports.error = function (text) {\n  let err = new Error(text)\n  err.autoprefixer = true\n  throw err\n}\n\n/**\n * Return array, that doesn’t contain duplicates.\n */\nmodule.exports.uniq = function (array) {\n  return [...new Set(array)]\n}\n\n/**\n * Return \"-webkit-\" on \"-webkit- old\"\n */\nmodule.exports.removeNote = function (string) {\n  if (!string.includes(' ')) {\n    return string\n  }\n\n  return string.split(' ')[0]\n}\n\n/**\n * Escape RegExp symbols\n */\nmodule.exports.escapeRegexp = function (string) {\n  return string.replace(/[$()*+-.?[\\\\\\]^{|}]/g, '\\\\$&')\n}\n\n/**\n * Return regexp to check, that CSS string contain word\n */\nmodule.exports.regexp = function (word, escape = true) {\n  if (escape) {\n    word = this.escapeRegexp(word)\n  }\n  return new RegExp(`(^|[\\\\s,(])(${word}($|[\\\\s(,]))`, 'gi')\n}\n\n/**\n * Change comma list\n */\nmodule.exports.editList = function (value, callback) {\n  let origin = list.comma(value)\n  let changed = callback(origin, [])\n\n  if (origin === changed) {\n    return value\n  }\n\n  let join = value.match(/,\\s*/)\n  join = join ? join[0] : ', '\n  return changed.join(join)\n}\n\n/**\n * Split the selector into parts.\n * It returns 3 level deep array because selectors can be comma\n * separated (1), space separated (2), and combined (3)\n * @param {String} selector selector string\n * @return {Array<Array<Array>>} 3 level deep array of split selector\n * @see utils.test.js for examples\n */\nmodule.exports.splitSelector = function (selector) {\n  return list.comma(selector).map(i => {\n    return list.space(i).map(k => {\n      return k.split(/(?=\\.|#)/g)\n    })\n  })\n}\n\n/**\n * Return true if a given value only contains numbers.\n * @param {*} value\n * @returns {boolean}\n */\nmodule.exports.isPureNumber = function (value) {\n  if (typeof value === 'number') {\n    return true\n  }\n  if (typeof value === 'string') {\n    return /^[0-9]+$/.test(value)\n  }\n  return false\n}\n"],"mappings":"AAAA,IAAI;EAAEA;AAAF,IAAWC,OAAO,CAAC,SAAD,CAAtB;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,CAAeC,KAAf,GAAuB,UAAUC,IAAV,EAAgB;EACrC,IAAIC,GAAG,GAAG,IAAIC,KAAJ,CAAUF,IAAV,CAAV;EACAC,GAAG,CAACE,YAAJ,GAAmB,IAAnB;EACA,MAAMF,GAAN;AACD,CAJD;AAMA;AACA;AACA;;;AACAJ,MAAM,CAACC,OAAP,CAAeM,IAAf,GAAsB,UAAUC,KAAV,EAAiB;EACrC,OAAO,CAAC,GAAG,IAAIC,GAAJ,CAAQD,KAAR,CAAJ,CAAP;AACD,CAFD;AAIA;AACA;AACA;;;AACAR,MAAM,CAACC,OAAP,CAAeS,UAAf,GAA4B,UAAUC,MAAV,EAAkB;EAC5C,IAAI,CAACA,MAAM,CAACC,QAAP,CAAgB,GAAhB,CAAL,EAA2B;IACzB,OAAOD,MAAP;EACD;;EAED,OAAOA,MAAM,CAACE,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAP;AACD,CAND;AAQA;AACA;AACA;;;AACAb,MAAM,CAACC,OAAP,CAAea,YAAf,GAA8B,UAAUH,MAAV,EAAkB;EAC9C,OAAOA,MAAM,CAACI,OAAP,CAAe,sBAAf,EAAuC,MAAvC,CAAP;AACD,CAFD;AAIA;AACA;AACA;;;AACAf,MAAM,CAACC,OAAP,CAAee,MAAf,GAAwB,UAAUC,IAAV,EAA+B;EAAA,IAAfC,MAAe,uEAAN,IAAM;;EACrD,IAAIA,MAAJ,EAAY;IACVD,IAAI,GAAG,KAAKH,YAAL,CAAkBG,IAAlB,CAAP;EACD;;EACD,OAAO,IAAIE,MAAJ,CAAY,eAAcF,IAAK,cAA/B,EAA8C,IAA9C,CAAP;AACD,CALD;AAOA;AACA;AACA;;;AACAjB,MAAM,CAACC,OAAP,CAAemB,QAAf,GAA0B,UAAUC,KAAV,EAAiBC,QAAjB,EAA2B;EACnD,IAAIC,MAAM,GAAGzB,IAAI,CAAC0B,KAAL,CAAWH,KAAX,CAAb;EACA,IAAII,OAAO,GAAGH,QAAQ,CAACC,MAAD,EAAS,EAAT,CAAtB;;EAEA,IAAIA,MAAM,KAAKE,OAAf,EAAwB;IACtB,OAAOJ,KAAP;EACD;;EAED,IAAIK,IAAI,GAAGL,KAAK,CAACM,KAAN,CAAY,MAAZ,CAAX;EACAD,IAAI,GAAGA,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAP,GAAa,IAAxB;EACA,OAAOD,OAAO,CAACC,IAAR,CAAaA,IAAb,CAAP;AACD,CAXD;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA1B,MAAM,CAACC,OAAP,CAAe2B,aAAf,GAA+B,UAAUC,QAAV,EAAoB;EACjD,OAAO/B,IAAI,CAAC0B,KAAL,CAAWK,QAAX,EAAqBC,GAArB,CAAyBC,CAAC,IAAI;IACnC,OAAOjC,IAAI,CAACkC,KAAL,CAAWD,CAAX,EAAcD,GAAd,CAAkBG,CAAC,IAAI;MAC5B,OAAOA,CAAC,CAACpB,KAAF,CAAQ,WAAR,CAAP;IACD,CAFM,CAAP;EAGD,CAJM,CAAP;AAKD,CAND;AAQA;AACA;AACA;AACA;AACA;;;AACAb,MAAM,CAACC,OAAP,CAAeiC,YAAf,GAA8B,UAAUb,KAAV,EAAiB;EAC7C,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,IAAP;EACD;;EACD,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;IAC7B,OAAO,WAAWc,IAAX,CAAgBd,KAAhB,CAAP;EACD;;EACD,OAAO,KAAP;AACD,CARD"},"metadata":{},"sourceType":"script"}