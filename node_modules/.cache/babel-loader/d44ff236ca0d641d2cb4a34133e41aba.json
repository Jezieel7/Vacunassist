{"ast":null,"code":"let FractionJs = require('fraction.js');\n\nlet Prefixer = require('./prefixer');\n\nlet utils = require('./utils');\n\nconst REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi;\nconst SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i;\n\nclass Resolution extends Prefixer {\n  /**\n   * Return prefixed query name\n   */\n  prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio';\n    } else {\n      return prefix + name + '-device-pixel-ratio';\n    }\n  }\n  /**\n   * Return prefixed query\n   */\n\n\n  prefixQuery(prefix, name, colon, value, units) {\n    value = new FractionJs(value); // 1dpcm = 2.54dpi\n    // 1dppx = 96dpi\n\n    if (units === 'dpi') {\n      value = value.div(96);\n    } else if (units === 'dpcm') {\n      value = value.mul(2.54).div(96);\n    }\n\n    value = value.simplify();\n\n    if (prefix === '-o-') {\n      value = value.n + '/' + value.d;\n    }\n\n    return this.prefixName(prefix, name) + colon + value;\n  }\n  /**\n   * Remove prefixed queries\n   */\n\n\n  clean(rule) {\n    if (!this.bad) {\n      this.bad = [];\n\n      for (let prefix of this.prefixes) {\n        this.bad.push(this.prefixName(prefix, 'min'));\n        this.bad.push(this.prefixName(prefix, 'max'));\n      }\n    }\n\n    rule.params = utils.editList(rule.params, queries => {\n      return queries.filter(query => this.bad.every(i => !query.includes(i)));\n    });\n  }\n  /**\n   * Add prefixed queries\n   */\n\n\n  process(rule) {\n    let parent = this.parentPrefix(rule);\n    let prefixes = parent ? [parent] : this.prefixes;\n    rule.params = utils.editList(rule.params, (origin, prefixed) => {\n      for (let query of origin) {\n        if (!query.includes('min-resolution') && !query.includes('max-resolution')) {\n          prefixed.push(query);\n          continue;\n        }\n\n        for (let prefix of prefixes) {\n          let processed = query.replace(REGEXP, str => {\n            let parts = str.match(SPLIT);\n            return this.prefixQuery(prefix, parts[1], parts[2], parts[3], parts[4]);\n          });\n          prefixed.push(processed);\n        }\n\n        prefixed.push(query);\n      }\n\n      return utils.uniq(prefixed);\n    });\n  }\n\n}\n\nmodule.exports = Resolution;","map":{"version":3,"names":["FractionJs","require","Prefixer","utils","REGEXP","SPLIT","Resolution","prefixName","prefix","name","prefixQuery","colon","value","units","div","mul","simplify","n","d","clean","rule","bad","prefixes","push","params","editList","queries","filter","query","every","i","includes","process","parent","parentPrefix","origin","prefixed","processed","replace","str","parts","match","uniq","module","exports"],"sources":["C:/Users/PC/Desktop/programaciÃ³n/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/resolution.js"],"sourcesContent":["let FractionJs = require('fraction.js')\n\nlet Prefixer = require('./prefixer')\nlet utils = require('./utils')\n\nconst REGEXP = /(min|max)-resolution\\s*:\\s*\\d*\\.?\\d+(dppx|dpcm|dpi|x)/gi\nconst SPLIT = /(min|max)-resolution(\\s*:\\s*)(\\d*\\.?\\d+)(dppx|dpcm|dpi|x)/i\n\nclass Resolution extends Prefixer {\n  /**\n   * Return prefixed query name\n   */\n  prefixName(prefix, name) {\n    if (prefix === '-moz-') {\n      return name + '--moz-device-pixel-ratio'\n    } else {\n      return prefix + name + '-device-pixel-ratio'\n    }\n  }\n\n  /**\n   * Return prefixed query\n   */\n  prefixQuery(prefix, name, colon, value, units) {\n    value = new FractionJs(value)\n\n    // 1dpcm = 2.54dpi\n    // 1dppx = 96dpi\n    if (units === 'dpi') {\n      value = value.div(96)\n    } else if (units === 'dpcm') {\n      value = value.mul(2.54).div(96)\n    }\n    value = value.simplify()\n\n    if (prefix === '-o-') {\n      value = value.n + '/' + value.d\n    }\n    return this.prefixName(prefix, name) + colon + value\n  }\n\n  /**\n   * Remove prefixed queries\n   */\n  clean(rule) {\n    if (!this.bad) {\n      this.bad = []\n      for (let prefix of this.prefixes) {\n        this.bad.push(this.prefixName(prefix, 'min'))\n        this.bad.push(this.prefixName(prefix, 'max'))\n      }\n    }\n\n    rule.params = utils.editList(rule.params, queries => {\n      return queries.filter(query => this.bad.every(i => !query.includes(i)))\n    })\n  }\n\n  /**\n   * Add prefixed queries\n   */\n  process(rule) {\n    let parent = this.parentPrefix(rule)\n    let prefixes = parent ? [parent] : this.prefixes\n\n    rule.params = utils.editList(rule.params, (origin, prefixed) => {\n      for (let query of origin) {\n        if (\n          !query.includes('min-resolution') &&\n          !query.includes('max-resolution')\n        ) {\n          prefixed.push(query)\n          continue\n        }\n\n        for (let prefix of prefixes) {\n          let processed = query.replace(REGEXP, str => {\n            let parts = str.match(SPLIT)\n            return this.prefixQuery(\n              prefix,\n              parts[1],\n              parts[2],\n              parts[3],\n              parts[4]\n            )\n          })\n          prefixed.push(processed)\n        }\n        prefixed.push(query)\n      }\n\n      return utils.uniq(prefixed)\n    })\n  }\n}\n\nmodule.exports = Resolution\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}