{"ast":null,"code":"function last(array) {\n  return array[array.length - 1];\n}\n\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse(str) {\n    let current = [''];\n    let stack = [current];\n\n    for (let sym of str) {\n      if (sym === '(') {\n        current = [''];\n        last(stack).push(current);\n        stack.push(current);\n        continue;\n      }\n\n      if (sym === ')') {\n        stack.pop();\n        current = last(stack);\n        current.push('');\n        continue;\n      }\n\n      current[current.length - 1] += sym;\n    }\n\n    return stack[0];\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify(ast) {\n    let result = '';\n\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`;\n        continue;\n      }\n\n      result += i;\n    }\n\n    return result;\n  }\n\n};\nmodule.exports = brackets;","map":{"version":3,"names":["last","array","length","brackets","parse","str","current","stack","sym","push","pop","stringify","ast","result","i","module","exports"],"sources":["C:/Users/PC/Desktop/programaci√≥n/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/brackets.js"],"sourcesContent":["function last(array) {\n  return array[array.length - 1]\n}\n\nlet brackets = {\n  /**\n   * Parse string to nodes tree\n   */\n  parse(str) {\n    let current = ['']\n    let stack = [current]\n\n    for (let sym of str) {\n      if (sym === '(') {\n        current = ['']\n        last(stack).push(current)\n        stack.push(current)\n        continue\n      }\n\n      if (sym === ')') {\n        stack.pop()\n        current = last(stack)\n        current.push('')\n        continue\n      }\n\n      current[current.length - 1] += sym\n    }\n\n    return stack[0]\n  },\n\n  /**\n   * Generate output string by nodes tree\n   */\n  stringify(ast) {\n    let result = ''\n    for (let i of ast) {\n      if (typeof i === 'object') {\n        result += `(${brackets.stringify(i)})`\n        continue\n      }\n\n      result += i\n    }\n    return result\n  }\n}\n\nmodule.exports = brackets\n"],"mappings":"AAAA,SAASA,IAAT,CAAcC,KAAd,EAAqB;EACnB,OAAOA,KAAK,CAACA,KAAK,CAACC,MAAN,GAAe,CAAhB,CAAZ;AACD;;AAED,IAAIC,QAAQ,GAAG;EACb;AACF;AACA;EACEC,KAAK,CAACC,GAAD,EAAM;IACT,IAAIC,OAAO,GAAG,CAAC,EAAD,CAAd;IACA,IAAIC,KAAK,GAAG,CAACD,OAAD,CAAZ;;IAEA,KAAK,IAAIE,GAAT,IAAgBH,GAAhB,EAAqB;MACnB,IAAIG,GAAG,KAAK,GAAZ,EAAiB;QACfF,OAAO,GAAG,CAAC,EAAD,CAAV;QACAN,IAAI,CAACO,KAAD,CAAJ,CAAYE,IAAZ,CAAiBH,OAAjB;QACAC,KAAK,CAACE,IAAN,CAAWH,OAAX;QACA;MACD;;MAED,IAAIE,GAAG,KAAK,GAAZ,EAAiB;QACfD,KAAK,CAACG,GAAN;QACAJ,OAAO,GAAGN,IAAI,CAACO,KAAD,CAAd;QACAD,OAAO,CAACG,IAAR,CAAa,EAAb;QACA;MACD;;MAEDH,OAAO,CAACA,OAAO,CAACJ,MAAR,GAAiB,CAAlB,CAAP,IAA+BM,GAA/B;IACD;;IAED,OAAOD,KAAK,CAAC,CAAD,CAAZ;EACD,CA3BY;;EA6Bb;AACF;AACA;EACEI,SAAS,CAACC,GAAD,EAAM;IACb,IAAIC,MAAM,GAAG,EAAb;;IACA,KAAK,IAAIC,CAAT,IAAcF,GAAd,EAAmB;MACjB,IAAI,OAAOE,CAAP,KAAa,QAAjB,EAA2B;QACzBD,MAAM,IAAK,IAAGV,QAAQ,CAACQ,SAAT,CAAmBG,CAAnB,CAAsB,GAApC;QACA;MACD;;MAEDD,MAAM,IAAIC,CAAV;IACD;;IACD,OAAOD,MAAP;EACD;;AA3CY,CAAf;AA8CAE,MAAM,CAACC,OAAP,GAAiBb,QAAjB"},"metadata":{},"sourceType":"script"}