{"ast":null,"code":"let Prefixer = require('./prefixer');\n\nlet OldValue = require('./old-value');\n\nlet vendor = require('./vendor');\n\nlet utils = require('./utils');\n\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save(prefixes, decl) {\n    let prop = decl.prop;\n    let result = [];\n\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix];\n\n      if (value === decl.value) {\n        continue;\n      }\n\n      let item;\n      let propPrefix = vendor.prefix(prop);\n\n      if (propPrefix === '-pie-') {\n        continue;\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value;\n        result.push(item);\n        continue;\n      }\n\n      let prefixed = prefixes.prefixed(prop, prefix);\n      let rule = decl.parent;\n\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item);\n        continue;\n      }\n\n      let trimmed = value.replace(/\\s+/, ' ');\n      let already = rule.some(i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed);\n\n      if (already) {\n        result.push(item);\n        continue;\n      }\n\n      let cloned = this.clone(decl, {\n        value\n      });\n      item = decl.parent.insertBefore(decl, cloned);\n      result.push(item);\n    }\n\n    return result;\n  }\n  /**\n   * Is declaration need to be prefixed\n   */\n\n\n  check(decl) {\n    let value = decl.value;\n\n    if (!value.includes(this.name)) {\n      return false;\n    }\n\n    return !!value.match(this.regexp());\n  }\n  /**\n   * Lazy regexp loading\n   */\n\n\n  regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name));\n  }\n  /**\n   * Add prefix to values in string\n   */\n\n\n  replace(string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`);\n  }\n  /**\n   * Get value with comments if it was not changed\n   */\n\n\n  value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw;\n    } else {\n      return decl.value;\n    }\n  }\n  /**\n   * Save values with next prefixed token\n   */\n\n\n  add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {};\n    }\n\n    let value = decl._autoprefixerValues[prefix] || this.value(decl);\n    let before;\n\n    do {\n      before = value;\n      value = this.replace(value, prefix);\n      if (value === false) return;\n    } while (value !== before);\n\n    decl._autoprefixerValues[prefix] = value;\n  }\n  /**\n   * Return function to fast find prefixed value\n   */\n\n\n  old(prefix) {\n    return new OldValue(this.name, prefix + this.name);\n  }\n\n}\n\nmodule.exports = Value;","map":{"version":3,"names":["Prefixer","require","OldValue","vendor","utils","Value","save","prefixes","decl","prop","result","prefix","_autoprefixerValues","value","item","propPrefix","push","prefixed","rule","parent","every","i","trimmed","replace","already","some","cloned","clone","insertBefore","check","includes","name","match","regexp","regexpCache","string","raws","raw","add","before","old","module","exports"],"sources":["C:/Users/PC/Desktop/programaciÃ³n/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/value.js"],"sourcesContent":["let Prefixer = require('./prefixer')\nlet OldValue = require('./old-value')\nlet vendor = require('./vendor')\nlet utils = require('./utils')\n\nclass Value extends Prefixer {\n  /**\n   * Clone decl for each prefixed values\n   */\n  static save(prefixes, decl) {\n    let prop = decl.prop\n    let result = []\n\n    for (let prefix in decl._autoprefixerValues) {\n      let value = decl._autoprefixerValues[prefix]\n\n      if (value === decl.value) {\n        continue\n      }\n\n      let item\n      let propPrefix = vendor.prefix(prop)\n\n      if (propPrefix === '-pie-') {\n        continue\n      }\n\n      if (propPrefix === prefix) {\n        item = decl.value = value\n        result.push(item)\n        continue\n      }\n\n      let prefixed = prefixes.prefixed(prop, prefix)\n      let rule = decl.parent\n\n      if (!rule.every(i => i.prop !== prefixed)) {\n        result.push(item)\n        continue\n      }\n\n      let trimmed = value.replace(/\\s+/, ' ')\n      let already = rule.some(\n        i => i.prop === decl.prop && i.value.replace(/\\s+/, ' ') === trimmed\n      )\n\n      if (already) {\n        result.push(item)\n        continue\n      }\n\n      let cloned = this.clone(decl, { value })\n      item = decl.parent.insertBefore(decl, cloned)\n\n      result.push(item)\n    }\n\n    return result\n  }\n\n  /**\n   * Is declaration need to be prefixed\n   */\n  check(decl) {\n    let value = decl.value\n    if (!value.includes(this.name)) {\n      return false\n    }\n\n    return !!value.match(this.regexp())\n  }\n\n  /**\n   * Lazy regexp loading\n   */\n  regexp() {\n    return this.regexpCache || (this.regexpCache = utils.regexp(this.name))\n  }\n\n  /**\n   * Add prefix to values in string\n   */\n  replace(string, prefix) {\n    return string.replace(this.regexp(), `$1${prefix}$2`)\n  }\n\n  /**\n   * Get value with comments if it was not changed\n   */\n  value(decl) {\n    if (decl.raws.value && decl.raws.value.value === decl.value) {\n      return decl.raws.value.raw\n    } else {\n      return decl.value\n    }\n  }\n\n  /**\n   * Save values with next prefixed token\n   */\n  add(decl, prefix) {\n    if (!decl._autoprefixerValues) {\n      decl._autoprefixerValues = {}\n    }\n    let value = decl._autoprefixerValues[prefix] || this.value(decl)\n\n    let before\n    do {\n      before = value\n      value = this.replace(value, prefix)\n      if (value === false) return\n    } while (value !== before)\n\n    decl._autoprefixerValues[prefix] = value\n  }\n\n  /**\n   * Return function to fast find prefixed value\n   */\n  old(prefix) {\n    return new OldValue(this.name, prefix + this.name)\n  }\n}\n\nmodule.exports = Value\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}