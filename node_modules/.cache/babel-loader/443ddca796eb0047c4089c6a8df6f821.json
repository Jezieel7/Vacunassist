{"ast":null,"code":"let browserslist = require('browserslist');\n\nfunction capitalize(str) {\n  return str.slice(0, 1).toUpperCase() + str.slice(1);\n}\n\nconst NAMES = {\n  ie: 'IE',\n  ie_mob: 'IE Mobile',\n  ios_saf: 'iOS Safari',\n  op_mini: 'Opera Mini',\n  op_mob: 'Opera Mobile',\n  and_chr: 'Chrome for Android',\n  and_ff: 'Firefox for Android',\n  and_uc: 'UC for Android',\n  and_qq: 'QQ Browser',\n  kaios: 'KaiOS Browser',\n  baidu: 'Baidu Browser',\n  samsung: 'Samsung Internet'\n};\n\nfunction prefix(name, prefixes, note) {\n  let out = `  ${name}`;\n  if (note) out += ' *';\n  out += ': ';\n  out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ');\n  out += '\\n';\n  return out;\n}\n\nmodule.exports = function (prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return 'No browsers selected';\n  }\n\n  let versions = {};\n\n  for (let browser of prefixes.browsers.selected) {\n    let parts = browser.split(' ');\n    let name = parts[0];\n    let version = parts[1];\n    name = NAMES[name] || capitalize(name);\n\n    if (versions[name]) {\n      versions[name].push(version);\n    } else {\n      versions[name] = [version];\n    }\n  }\n\n  let out = 'Browsers:\\n';\n\n  for (let browser in versions) {\n    let list = versions[browser];\n    list = list.sort((a, b) => parseFloat(b) - parseFloat(a));\n    out += `  ${browser}: ${list.join(', ')}\\n`;\n  }\n\n  let coverage = browserslist.coverage(prefixes.browsers.selected);\n  let round = Math.round(coverage * 100) / 100.0;\n  out += `\\nThese browsers account for ${round}% of all users globally\\n`;\n  let atrules = [];\n\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name];\n\n    if (name[0] === '@' && data.prefixes) {\n      atrules.push(prefix(name, data.prefixes));\n    }\n  }\n\n  if (atrules.length > 0) {\n    out += `\\nAt-Rules:\\n${atrules.sort().join('')}`;\n  }\n\n  let selectors = [];\n\n  for (let selector of prefixes.add.selectors) {\n    if (selector.prefixes) {\n      selectors.push(prefix(selector.name, selector.prefixes));\n    }\n  }\n\n  if (selectors.length > 0) {\n    out += `\\nSelectors:\\n${selectors.sort().join('')}`;\n  }\n\n  let values = [];\n  let props = [];\n  let hadGrid = false;\n\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name];\n\n    if (name[0] !== '@' && data.prefixes) {\n      let grid = name.indexOf('grid-') === 0;\n      if (grid) hadGrid = true;\n      props.push(prefix(name, data.prefixes, grid));\n    }\n\n    if (!Array.isArray(data.values)) {\n      continue;\n    }\n\n    for (let value of data.values) {\n      let grid = value.name.includes('grid');\n      if (grid) hadGrid = true;\n      let string = prefix(value.name, value.prefixes, grid);\n\n      if (!values.includes(string)) {\n        values.push(string);\n      }\n    }\n  }\n\n  if (props.length > 0) {\n    out += `\\nProperties:\\n${props.sort().join('')}`;\n  }\n\n  if (values.length > 0) {\n    out += `\\nValues:\\n${values.sort().join('')}`;\n  }\n\n  if (hadGrid) {\n    out += '\\n* - Prefixes will be added only on grid: true option.\\n';\n  }\n\n  if (!atrules.length && !selectors.length && !props.length && !values.length) {\n    out += \"\\nAwesome! Your browsers don't require any vendor prefixes.\" + '\\nNow you can remove Autoprefixer from build steps.';\n  }\n\n  return out;\n};","map":{"version":3,"names":["browserslist","require","capitalize","str","slice","toUpperCase","NAMES","ie","ie_mob","ios_saf","op_mini","op_mob","and_chr","and_ff","and_uc","and_qq","kaios","baidu","samsung","prefix","name","prefixes","note","out","map","i","replace","join","module","exports","browsers","selected","length","versions","browser","parts","split","version","push","list","sort","a","b","parseFloat","coverage","round","Math","atrules","add","data","selectors","selector","values","props","hadGrid","grid","indexOf","Array","isArray","value","includes","string"],"sources":["C:/Users/PC/Desktop/programaciÃ³n/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/info.js"],"sourcesContent":["let browserslist = require('browserslist')\n\nfunction capitalize(str) {\n  return str.slice(0, 1).toUpperCase() + str.slice(1)\n}\n\nconst NAMES = {\n  ie: 'IE',\n  ie_mob: 'IE Mobile',\n  ios_saf: 'iOS Safari',\n  op_mini: 'Opera Mini',\n  op_mob: 'Opera Mobile',\n  and_chr: 'Chrome for Android',\n  and_ff: 'Firefox for Android',\n  and_uc: 'UC for Android',\n  and_qq: 'QQ Browser',\n  kaios: 'KaiOS Browser',\n  baidu: 'Baidu Browser',\n  samsung: 'Samsung Internet'\n}\n\nfunction prefix(name, prefixes, note) {\n  let out = `  ${name}`\n  if (note) out += ' *'\n  out += ': '\n  out += prefixes.map(i => i.replace(/^-(.*)-$/g, '$1')).join(', ')\n  out += '\\n'\n  return out\n}\n\nmodule.exports = function (prefixes) {\n  if (prefixes.browsers.selected.length === 0) {\n    return 'No browsers selected'\n  }\n\n  let versions = {}\n  for (let browser of prefixes.browsers.selected) {\n    let parts = browser.split(' ')\n    let name = parts[0]\n    let version = parts[1]\n\n    name = NAMES[name] || capitalize(name)\n    if (versions[name]) {\n      versions[name].push(version)\n    } else {\n      versions[name] = [version]\n    }\n  }\n\n  let out = 'Browsers:\\n'\n  for (let browser in versions) {\n    let list = versions[browser]\n    list = list.sort((a, b) => parseFloat(b) - parseFloat(a))\n    out += `  ${browser}: ${list.join(', ')}\\n`\n  }\n\n  let coverage = browserslist.coverage(prefixes.browsers.selected)\n  let round = Math.round(coverage * 100) / 100.0\n  out += `\\nThese browsers account for ${round}% of all users globally\\n`\n\n  let atrules = []\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] === '@' && data.prefixes) {\n      atrules.push(prefix(name, data.prefixes))\n    }\n  }\n  if (atrules.length > 0) {\n    out += `\\nAt-Rules:\\n${atrules.sort().join('')}`\n  }\n\n  let selectors = []\n  for (let selector of prefixes.add.selectors) {\n    if (selector.prefixes) {\n      selectors.push(prefix(selector.name, selector.prefixes))\n    }\n  }\n  if (selectors.length > 0) {\n    out += `\\nSelectors:\\n${selectors.sort().join('')}`\n  }\n\n  let values = []\n  let props = []\n  let hadGrid = false\n  for (let name in prefixes.add) {\n    let data = prefixes.add[name]\n    if (name[0] !== '@' && data.prefixes) {\n      let grid = name.indexOf('grid-') === 0\n      if (grid) hadGrid = true\n      props.push(prefix(name, data.prefixes, grid))\n    }\n\n    if (!Array.isArray(data.values)) {\n      continue\n    }\n    for (let value of data.values) {\n      let grid = value.name.includes('grid')\n      if (grid) hadGrid = true\n      let string = prefix(value.name, value.prefixes, grid)\n      if (!values.includes(string)) {\n        values.push(string)\n      }\n    }\n  }\n\n  if (props.length > 0) {\n    out += `\\nProperties:\\n${props.sort().join('')}`\n  }\n  if (values.length > 0) {\n    out += `\\nValues:\\n${values.sort().join('')}`\n  }\n  if (hadGrid) {\n    out += '\\n* - Prefixes will be added only on grid: true option.\\n'\n  }\n\n  if (!atrules.length && !selectors.length && !props.length && !values.length) {\n    out +=\n      \"\\nAwesome! Your browsers don't require any vendor prefixes.\" +\n      '\\nNow you can remove Autoprefixer from build steps.'\n  }\n\n  return out\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}