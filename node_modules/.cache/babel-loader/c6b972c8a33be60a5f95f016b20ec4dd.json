{"ast":null,"code":"let flexSpec = require('./flex-spec');\n\nlet Declaration = require('../declaration');\n\nclass Order extends Declaration {\n  /**\n   * Change property name for 2009 and 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec;\n    [spec, prefix] = flexSpec(prefix);\n\n    if (spec === 2009) {\n      return prefix + 'box-ordinal-group';\n    }\n\n    if (spec === 2012) {\n      return prefix + 'flex-order';\n    }\n\n    return super.prefixed(prop, prefix);\n  }\n  /**\n   * Return property name by final spec\n   */\n\n\n  normalize() {\n    return 'order';\n  }\n  /**\n   * Fix value for 2009 spec\n   */\n\n\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0];\n\n    if (spec === 2009 && /\\d/.test(decl.value)) {\n      decl.value = (parseInt(decl.value) + 1).toString();\n      return super.set(decl, prefix);\n    }\n\n    return super.set(decl, prefix);\n  }\n\n}\n\nOrder.names = ['order', 'flex-order', 'box-ordinal-group'];\nmodule.exports = Order;","map":{"version":3,"names":["flexSpec","require","Declaration","Order","prefixed","prop","prefix","spec","normalize","set","decl","test","value","parseInt","toString","names","module","exports"],"sources":["C:/Users/PC/Desktop/programaci√≥n/VacunAssistIS2/Vacunassist/node_modules/autoprefixer/lib/hacks/order.js"],"sourcesContent":["let flexSpec = require('./flex-spec')\nlet Declaration = require('../declaration')\n\nclass Order extends Declaration {\n  /**\n   * Change property name for 2009 and 2012 specs\n   */\n  prefixed(prop, prefix) {\n    let spec\n    ;[spec, prefix] = flexSpec(prefix)\n    if (spec === 2009) {\n      return prefix + 'box-ordinal-group'\n    }\n    if (spec === 2012) {\n      return prefix + 'flex-order'\n    }\n    return super.prefixed(prop, prefix)\n  }\n\n  /**\n   * Return property name by final spec\n   */\n  normalize() {\n    return 'order'\n  }\n\n  /**\n   * Fix value for 2009 spec\n   */\n  set(decl, prefix) {\n    let spec = flexSpec(prefix)[0]\n    if (spec === 2009 && /\\d/.test(decl.value)) {\n      decl.value = (parseInt(decl.value) + 1).toString()\n      return super.set(decl, prefix)\n    }\n    return super.set(decl, prefix)\n  }\n}\n\nOrder.names = ['order', 'flex-order', 'box-ordinal-group']\n\nmodule.exports = Order\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,gBAAD,CAAzB;;AAEA,MAAME,KAAN,SAAoBD,WAApB,CAAgC;EAC9B;AACF;AACA;EACEE,QAAQ,CAACC,IAAD,EAAOC,MAAP,EAAe;IACrB,IAAIC,IAAJ;IACC,CAACA,IAAD,EAAOD,MAAP,IAAiBN,QAAQ,CAACM,MAAD,CAAzB;;IACD,IAAIC,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAOD,MAAM,GAAG,mBAAhB;IACD;;IACD,IAAIC,IAAI,KAAK,IAAb,EAAmB;MACjB,OAAOD,MAAM,GAAG,YAAhB;IACD;;IACD,OAAO,MAAMF,QAAN,CAAeC,IAAf,EAAqBC,MAArB,CAAP;EACD;EAED;AACF;AACA;;;EACEE,SAAS,GAAG;IACV,OAAO,OAAP;EACD;EAED;AACF;AACA;;;EACEC,GAAG,CAACC,IAAD,EAAOJ,MAAP,EAAe;IAChB,IAAIC,IAAI,GAAGP,QAAQ,CAACM,MAAD,CAAR,CAAiB,CAAjB,CAAX;;IACA,IAAIC,IAAI,KAAK,IAAT,IAAiB,KAAKI,IAAL,CAAUD,IAAI,CAACE,KAAf,CAArB,EAA4C;MAC1CF,IAAI,CAACE,KAAL,GAAa,CAACC,QAAQ,CAACH,IAAI,CAACE,KAAN,CAAR,GAAuB,CAAxB,EAA2BE,QAA3B,EAAb;MACA,OAAO,MAAML,GAAN,CAAUC,IAAV,EAAgBJ,MAAhB,CAAP;IACD;;IACD,OAAO,MAAMG,GAAN,CAAUC,IAAV,EAAgBJ,MAAhB,CAAP;EACD;;AAjC6B;;AAoChCH,KAAK,CAACY,KAAN,GAAc,CAAC,OAAD,EAAU,YAAV,EAAwB,mBAAxB,CAAd;AAEAC,MAAM,CAACC,OAAP,GAAiBd,KAAjB"},"metadata":{},"sourceType":"script"}